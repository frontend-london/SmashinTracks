<?php


/**
 * Skeleton subclass for performing query and update operations on the 'banners' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 02/03/11 19:41:20
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class BannersPeer extends BaseBannersPeer {


    public static function getBanners($type = null, $criteria = null) {
        if ($criteria === null) {
                $criteria = new Criteria(self::DATABASE_NAME);
        }
        elseif ($criteria instanceof Criteria)
        {
                $criteria = clone $criteria;
        }

        if(isset($type)) $criteria->add(self::BANNERS_TYPE, $type);
        $criteria->addAscendingOrderByColumn(self::BANNERS_ORDER);
        return self::doSelect($criteria);
    }

    public static function getBannersSide() {
        $criteria = new Criteria();
        $criteria->add(self::BANNERS_ACTIVE, 1);
        return self::getBanners(2, $criteria);
    }

    public static function getRandBanner($type = null, $criteria = null) {
        if ($criteria === null) {
                $criteria = new Criteria(self::DATABASE_NAME);
        }
        elseif ($criteria instanceof Criteria)
        {
                $criteria = clone $criteria;
        }

        if(isset($type)) $criteria->add(self::BANNERS_TYPE, $type);
        $criteria->add(self::BANNERS_ACTIVE, 1);
        $criteria->addAscendingOrderByColumn('RAND()');
        return self::doSelectOne($criteria);
    }


    public static function getBannersById($banners_id, $criteria = null) {
        if ($criteria === null) {
                $criteria = new Criteria();
        }
        elseif ($criteria instanceof Criteria)
        {
                $criteria = clone $criteria;
        }
        $criteria->add(self::BANNERS_ID, $banners_id);
        return self::doSelectOne($criteria);
    }

    public static function getMaxBannersOrder($criteria = null) {
        if ($criteria === null) {
                $criteria = new Criteria();
        }
        elseif ($criteria instanceof Criteria)
        {
                $criteria = clone $criteria;
        }
        $criteria->addSelectColumn('MAX('.self::BANNERS_ORDER.')');
        $smtm = self::doSelectStmt($criteria);
        $row = $smtm->fetch(PDO::FETCH_NUM);
        return $row[0];
    }

} // BannersPeer
