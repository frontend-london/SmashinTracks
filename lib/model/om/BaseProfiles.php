<?php

/**
 * Base class that represents a row from the 'profiles' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 03/18/11 13:19:19
 *
 * @package    lib.model.om
 */
abstract class BaseProfiles extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ProfilesPeer
	 */
	protected static $peer;

	/**
	 * The value for the profiles_id field.
	 * @var        int
	 */
	protected $profiles_id;

	/**
	 * The value for the profiles_name field.
	 * @var        string
	 */
	protected $profiles_name;

	/**
	 * The value for the profiles_email field.
	 * @var        string
	 */
	protected $profiles_email;

	/**
	 * The value for the profiles_password field.
	 * @var        string
	 */
	protected $profiles_password;

	/**
	 * The value for the profiles_text field.
	 * @var        string
	 */
	protected $profiles_text;

	/**
	 * The value for the profiles_date field.
	 * @var        string
	 */
	protected $profiles_date;

	/**
	 * The value for the profiles_path field.
	 * @var        string
	 */
	protected $profiles_path;

	/**
	 * The value for the profiles_photo field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $profiles_photo;

	/**
	 * The value for the profiles_balance field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $profiles_balance;

	/**
	 * The value for the profiles_blocked field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $profiles_blocked;

	/**
	 * The value for the profiles_deleted field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $profiles_deleted;

	/**
	 * The value for the profiles_password_url field.
	 * @var        string
	 */
	protected $profiles_password_url;

	/**
	 * The value for the profiles_newsletter field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $profiles_newsletter;

	/**
	 * @var        array ProfilesBaskets[] Collection to store aggregation of ProfilesBaskets objects.
	 */
	protected $collProfilesBasketss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilesBasketss.
	 */
	private $lastProfilesBasketsCriteria = null;

	/**
	 * @var        array ProfilesUrls[] Collection to store aggregation of ProfilesUrls objects.
	 */
	protected $collProfilesUrlss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilesUrlss.
	 */
	private $lastProfilesUrlsCriteria = null;

	/**
	 * @var        array ProfilesViewed[] Collection to store aggregation of ProfilesViewed objects.
	 */
	protected $collProfilesViewedsRelatedByArtistsId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilesViewedsRelatedByArtistsId.
	 */
	private $lastProfilesViewedRelatedByArtistsIdCriteria = null;

	/**
	 * @var        array ProfilesViewed[] Collection to store aggregation of ProfilesViewed objects.
	 */
	protected $collProfilesViewedsRelatedByProfilesId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilesViewedsRelatedByProfilesId.
	 */
	private $lastProfilesViewedRelatedByProfilesIdCriteria = null;

	/**
	 * @var        array ProfilesWishlists[] Collection to store aggregation of ProfilesWishlists objects.
	 */
	protected $collProfilesWishlistss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilesWishlistss.
	 */
	private $lastProfilesWishlistsCriteria = null;

	/**
	 * @var        array Tracks[] Collection to store aggregation of Tracks objects.
	 */
	protected $collTrackss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTrackss.
	 */
	private $lastTracksCriteria = null;

	/**
	 * @var        array TracksPlayed[] Collection to store aggregation of TracksPlayed objects.
	 */
	protected $collTracksPlayeds;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTracksPlayeds.
	 */
	private $lastTracksPlayedCriteria = null;

	/**
	 * @var        array Transactions[] Collection to store aggregation of Transactions objects.
	 */
	protected $collTransactionss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTransactionss.
	 */
	private $lastTransactionsCriteria = null;

	/**
	 * @var        array TransactionsSaldo[] Collection to store aggregation of TransactionsSaldo objects.
	 */
	protected $collTransactionsSaldos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTransactionsSaldos.
	 */
	private $lastTransactionsSaldoCriteria = null;

	/**
	 * @var        array Withdraws[] Collection to store aggregation of Withdraws objects.
	 */
	protected $collWithdrawss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collWithdrawss.
	 */
	private $lastWithdrawsCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ProfilesPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->profiles_photo = 0;
		$this->profiles_balance = 0;
		$this->profiles_blocked = 0;
		$this->profiles_deleted = 0;
		$this->profiles_newsletter = 0;
	}

	/**
	 * Initializes internal state of BaseProfiles object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [profiles_id] column value.
	 * 
	 * @return     int
	 */
	public function getProfilesId()
	{
		return $this->profiles_id;
	}

	/**
	 * Get the [profiles_name] column value.
	 * 
	 * @return     string
	 */
	public function getProfilesName()
	{
		return $this->profiles_name;
	}

	/**
	 * Get the [profiles_email] column value.
	 * 
	 * @return     string
	 */
	public function getProfilesEmail()
	{
		return $this->profiles_email;
	}

	/**
	 * Get the [profiles_password] column value.
	 * 
	 * @return     string
	 */
	public function getProfilesPassword()
	{
		return $this->profiles_password;
	}

	/**
	 * Get the [profiles_text] column value.
	 * 
	 * @return     string
	 */
	public function getProfilesText()
	{
		return $this->profiles_text;
	}

	/**
	 * Get the [optionally formatted] temporal [profiles_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getProfilesDate($format = 'Y-m-d H:i:s')
	{
		if ($this->profiles_date === null) {
			return null;
		}


		if ($this->profiles_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->profiles_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->profiles_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [profiles_path] column value.
	 * 
	 * @return     string
	 */
	public function getProfilesPath()
	{
		return $this->profiles_path;
	}

	/**
	 * Get the [profiles_photo] column value.
	 * 
	 * @return     int
	 */
	public function getProfilesPhoto()
	{
		return $this->profiles_photo;
	}

	/**
	 * Get the [profiles_balance] column value.
	 * 
	 * @return     int
	 */
	public function getProfilesBalance()
	{
		return $this->profiles_balance;
	}

	/**
	 * Get the [profiles_blocked] column value.
	 * 
	 * @return     int
	 */
	public function getProfilesBlocked()
	{
		return $this->profiles_blocked;
	}

	/**
	 * Get the [profiles_deleted] column value.
	 * 
	 * @return     int
	 */
	public function getProfilesDeleted()
	{
		return $this->profiles_deleted;
	}

	/**
	 * Get the [profiles_password_url] column value.
	 * 
	 * @return     string
	 */
	public function getProfilesPasswordUrl()
	{
		return $this->profiles_password_url;
	}

	/**
	 * Get the [profiles_newsletter] column value.
	 * 
	 * @return     int
	 */
	public function getProfilesNewsletter()
	{
		return $this->profiles_newsletter;
	}

	/**
	 * Set the value of [profiles_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profiles_id !== $v) {
			$this->profiles_id = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_ID;
		}

		return $this;
	} // setProfilesId()

	/**
	 * Set the value of [profiles_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->profiles_name !== $v) {
			$this->profiles_name = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_NAME;
		}

		return $this;
	} // setProfilesName()

	/**
	 * Set the value of [profiles_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->profiles_email !== $v) {
			$this->profiles_email = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_EMAIL;
		}

		return $this;
	} // setProfilesEmail()

	/**
	 * Set the value of [profiles_password] column.
	 * 
	 * @param      string $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->profiles_password !== $v) {
			$this->profiles_password = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_PASSWORD;
		}

		return $this;
	} // setProfilesPassword()

	/**
	 * Set the value of [profiles_text] column.
	 * 
	 * @param      string $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesText($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->profiles_text !== $v) {
			$this->profiles_text = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_TEXT;
		}

		return $this;
	} // setProfilesText()

	/**
	 * Sets the value of [profiles_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->profiles_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->profiles_date !== null && $tmpDt = new DateTime($this->profiles_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->profiles_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ProfilesPeer::PROFILES_DATE;
			}
		} // if either are not null

		return $this;
	} // setProfilesDate()

	/**
	 * Set the value of [profiles_path] column.
	 * 
	 * @param      string $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesPath($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->profiles_path !== $v) {
			$this->profiles_path = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_PATH;
		}

		return $this;
	} // setProfilesPath()

	/**
	 * Set the value of [profiles_photo] column.
	 * 
	 * @param      int $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesPhoto($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profiles_photo !== $v || $this->isNew()) {
			$this->profiles_photo = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_PHOTO;
		}

		return $this;
	} // setProfilesPhoto()

	/**
	 * Set the value of [profiles_balance] column.
	 * 
	 * @param      int $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesBalance($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profiles_balance !== $v || $this->isNew()) {
			$this->profiles_balance = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_BALANCE;
		}

		return $this;
	} // setProfilesBalance()

	/**
	 * Set the value of [profiles_blocked] column.
	 * 
	 * @param      int $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesBlocked($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profiles_blocked !== $v || $this->isNew()) {
			$this->profiles_blocked = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_BLOCKED;
		}

		return $this;
	} // setProfilesBlocked()

	/**
	 * Set the value of [profiles_deleted] column.
	 * 
	 * @param      int $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesDeleted($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profiles_deleted !== $v || $this->isNew()) {
			$this->profiles_deleted = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_DELETED;
		}

		return $this;
	} // setProfilesDeleted()

	/**
	 * Set the value of [profiles_password_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesPasswordUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->profiles_password_url !== $v) {
			$this->profiles_password_url = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_PASSWORD_URL;
		}

		return $this;
	} // setProfilesPasswordUrl()

	/**
	 * Set the value of [profiles_newsletter] column.
	 * 
	 * @param      int $v new value
	 * @return     Profiles The current object (for fluent API support)
	 */
	public function setProfilesNewsletter($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profiles_newsletter !== $v || $this->isNew()) {
			$this->profiles_newsletter = $v;
			$this->modifiedColumns[] = ProfilesPeer::PROFILES_NEWSLETTER;
		}

		return $this;
	} // setProfilesNewsletter()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->profiles_photo !== 0) {
				return false;
			}

			if ($this->profiles_balance !== 0) {
				return false;
			}

			if ($this->profiles_blocked !== 0) {
				return false;
			}

			if ($this->profiles_deleted !== 0) {
				return false;
			}

			if ($this->profiles_newsletter !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->profiles_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->profiles_name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->profiles_email = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->profiles_password = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->profiles_text = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->profiles_date = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->profiles_path = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->profiles_photo = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->profiles_balance = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->profiles_blocked = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->profiles_deleted = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->profiles_password_url = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->profiles_newsletter = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 13; // 13 = ProfilesPeer::NUM_COLUMNS - ProfilesPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Profiles object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProfilesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ProfilesPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collProfilesBasketss = null;
			$this->lastProfilesBasketsCriteria = null;

			$this->collProfilesUrlss = null;
			$this->lastProfilesUrlsCriteria = null;

			$this->collProfilesViewedsRelatedByArtistsId = null;
			$this->lastProfilesViewedRelatedByArtistsIdCriteria = null;

			$this->collProfilesViewedsRelatedByProfilesId = null;
			$this->lastProfilesViewedRelatedByProfilesIdCriteria = null;

			$this->collProfilesWishlistss = null;
			$this->lastProfilesWishlistsCriteria = null;

			$this->collTrackss = null;
			$this->lastTracksCriteria = null;

			$this->collTracksPlayeds = null;
			$this->lastTracksPlayedCriteria = null;

			$this->collTransactionss = null;
			$this->lastTransactionsCriteria = null;

			$this->collTransactionsSaldos = null;
			$this->lastTransactionsSaldoCriteria = null;

			$this->collWithdrawss = null;
			$this->lastWithdrawsCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProfilesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProfiles:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ProfilesPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProfiles:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProfilesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProfiles:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProfiles:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ProfilesPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ProfilesPeer::PROFILES_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProfilesPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setProfilesId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ProfilesPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collProfilesBasketss !== null) {
				foreach ($this->collProfilesBasketss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilesUrlss !== null) {
				foreach ($this->collProfilesUrlss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilesViewedsRelatedByArtistsId !== null) {
				foreach ($this->collProfilesViewedsRelatedByArtistsId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilesViewedsRelatedByProfilesId !== null) {
				foreach ($this->collProfilesViewedsRelatedByProfilesId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilesWishlistss !== null) {
				foreach ($this->collProfilesWishlistss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTrackss !== null) {
				foreach ($this->collTrackss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTracksPlayeds !== null) {
				foreach ($this->collTracksPlayeds as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTransactionss !== null) {
				foreach ($this->collTransactionss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTransactionsSaldos !== null) {
				foreach ($this->collTransactionsSaldos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collWithdrawss !== null) {
				foreach ($this->collWithdrawss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ProfilesPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collProfilesBasketss !== null) {
					foreach ($this->collProfilesBasketss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilesUrlss !== null) {
					foreach ($this->collProfilesUrlss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilesViewedsRelatedByArtistsId !== null) {
					foreach ($this->collProfilesViewedsRelatedByArtistsId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilesViewedsRelatedByProfilesId !== null) {
					foreach ($this->collProfilesViewedsRelatedByProfilesId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilesWishlistss !== null) {
					foreach ($this->collProfilesWishlistss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTrackss !== null) {
					foreach ($this->collTrackss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTracksPlayeds !== null) {
					foreach ($this->collTracksPlayeds as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTransactionss !== null) {
					foreach ($this->collTransactionss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTransactionsSaldos !== null) {
					foreach ($this->collTransactionsSaldos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collWithdrawss !== null) {
					foreach ($this->collWithdrawss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProfilesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getProfilesId();
				break;
			case 1:
				return $this->getProfilesName();
				break;
			case 2:
				return $this->getProfilesEmail();
				break;
			case 3:
				return $this->getProfilesPassword();
				break;
			case 4:
				return $this->getProfilesText();
				break;
			case 5:
				return $this->getProfilesDate();
				break;
			case 6:
				return $this->getProfilesPath();
				break;
			case 7:
				return $this->getProfilesPhoto();
				break;
			case 8:
				return $this->getProfilesBalance();
				break;
			case 9:
				return $this->getProfilesBlocked();
				break;
			case 10:
				return $this->getProfilesDeleted();
				break;
			case 11:
				return $this->getProfilesPasswordUrl();
				break;
			case 12:
				return $this->getProfilesNewsletter();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ProfilesPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getProfilesId(),
			$keys[1] => $this->getProfilesName(),
			$keys[2] => $this->getProfilesEmail(),
			$keys[3] => $this->getProfilesPassword(),
			$keys[4] => $this->getProfilesText(),
			$keys[5] => $this->getProfilesDate(),
			$keys[6] => $this->getProfilesPath(),
			$keys[7] => $this->getProfilesPhoto(),
			$keys[8] => $this->getProfilesBalance(),
			$keys[9] => $this->getProfilesBlocked(),
			$keys[10] => $this->getProfilesDeleted(),
			$keys[11] => $this->getProfilesPasswordUrl(),
			$keys[12] => $this->getProfilesNewsletter(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProfilesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setProfilesId($value);
				break;
			case 1:
				$this->setProfilesName($value);
				break;
			case 2:
				$this->setProfilesEmail($value);
				break;
			case 3:
				$this->setProfilesPassword($value);
				break;
			case 4:
				$this->setProfilesText($value);
				break;
			case 5:
				$this->setProfilesDate($value);
				break;
			case 6:
				$this->setProfilesPath($value);
				break;
			case 7:
				$this->setProfilesPhoto($value);
				break;
			case 8:
				$this->setProfilesBalance($value);
				break;
			case 9:
				$this->setProfilesBlocked($value);
				break;
			case 10:
				$this->setProfilesDeleted($value);
				break;
			case 11:
				$this->setProfilesPasswordUrl($value);
				break;
			case 12:
				$this->setProfilesNewsletter($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ProfilesPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setProfilesId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setProfilesName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setProfilesEmail($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setProfilesPassword($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setProfilesText($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setProfilesDate($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setProfilesPath($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setProfilesPhoto($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setProfilesBalance($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setProfilesBlocked($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setProfilesDeleted($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setProfilesPasswordUrl($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setProfilesNewsletter($arr[$keys[12]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);

		if ($this->isColumnModified(ProfilesPeer::PROFILES_ID)) $criteria->add(ProfilesPeer::PROFILES_ID, $this->profiles_id);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_NAME)) $criteria->add(ProfilesPeer::PROFILES_NAME, $this->profiles_name);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_EMAIL)) $criteria->add(ProfilesPeer::PROFILES_EMAIL, $this->profiles_email);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_PASSWORD)) $criteria->add(ProfilesPeer::PROFILES_PASSWORD, $this->profiles_password);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_TEXT)) $criteria->add(ProfilesPeer::PROFILES_TEXT, $this->profiles_text);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_DATE)) $criteria->add(ProfilesPeer::PROFILES_DATE, $this->profiles_date);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_PATH)) $criteria->add(ProfilesPeer::PROFILES_PATH, $this->profiles_path);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_PHOTO)) $criteria->add(ProfilesPeer::PROFILES_PHOTO, $this->profiles_photo);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_BALANCE)) $criteria->add(ProfilesPeer::PROFILES_BALANCE, $this->profiles_balance);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_BLOCKED)) $criteria->add(ProfilesPeer::PROFILES_BLOCKED, $this->profiles_blocked);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_DELETED)) $criteria->add(ProfilesPeer::PROFILES_DELETED, $this->profiles_deleted);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_PASSWORD_URL)) $criteria->add(ProfilesPeer::PROFILES_PASSWORD_URL, $this->profiles_password_url);
		if ($this->isColumnModified(ProfilesPeer::PROFILES_NEWSLETTER)) $criteria->add(ProfilesPeer::PROFILES_NEWSLETTER, $this->profiles_newsletter);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);

		$criteria->add(ProfilesPeer::PROFILES_ID, $this->profiles_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getProfilesId();
	}

	/**
	 * Generic method to set the primary key (profiles_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setProfilesId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Profiles (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setProfilesName($this->profiles_name);

		$copyObj->setProfilesEmail($this->profiles_email);

		$copyObj->setProfilesPassword($this->profiles_password);

		$copyObj->setProfilesText($this->profiles_text);

		$copyObj->setProfilesDate($this->profiles_date);

		$copyObj->setProfilesPath($this->profiles_path);

		$copyObj->setProfilesPhoto($this->profiles_photo);

		$copyObj->setProfilesBalance($this->profiles_balance);

		$copyObj->setProfilesBlocked($this->profiles_blocked);

		$copyObj->setProfilesDeleted($this->profiles_deleted);

		$copyObj->setProfilesPasswordUrl($this->profiles_password_url);

		$copyObj->setProfilesNewsletter($this->profiles_newsletter);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getProfilesBasketss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfilesBaskets($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilesUrlss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfilesUrls($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilesViewedsRelatedByArtistsId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfilesViewedRelatedByArtistsId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilesViewedsRelatedByProfilesId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfilesViewedRelatedByProfilesId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilesWishlistss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfilesWishlists($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTrackss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTracks($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTracksPlayeds() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTracksPlayed($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTransactionss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTransactions($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTransactionsSaldos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTransactionsSaldo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getWithdrawss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addWithdraws($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setProfilesId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Profiles Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ProfilesPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProfilesPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collProfilesBasketss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilesBasketss()
	 */
	public function clearProfilesBasketss()
	{
		$this->collProfilesBasketss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilesBasketss collection (array).
	 *
	 * By default this just sets the collProfilesBasketss collection to an empty array (like clearcollProfilesBasketss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilesBasketss()
	{
		$this->collProfilesBasketss = array();
	}

	/**
	 * Gets an array of ProfilesBaskets objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profiles has previously been saved, it will retrieve
	 * related ProfilesBasketss from storage. If this Profiles is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProfilesBaskets[]
	 * @throws     PropelException
	 */
	public function getProfilesBasketss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesBasketss === null) {
			if ($this->isNew()) {
			   $this->collProfilesBasketss = array();
			} else {

				$criteria->add(ProfilesBasketsPeer::PROFILES_ID, $this->profiles_id);

				ProfilesBasketsPeer::addSelectColumns($criteria);
				$this->collProfilesBasketss = ProfilesBasketsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilesBasketsPeer::PROFILES_ID, $this->profiles_id);

				ProfilesBasketsPeer::addSelectColumns($criteria);
				if (!isset($this->lastProfilesBasketsCriteria) || !$this->lastProfilesBasketsCriteria->equals($criteria)) {
					$this->collProfilesBasketss = ProfilesBasketsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfilesBasketsCriteria = $criteria;
		return $this->collProfilesBasketss;
	}

	/**
	 * Returns the number of related ProfilesBaskets objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProfilesBaskets objects.
	 * @throws     PropelException
	 */
	public function countProfilesBasketss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilesBasketss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilesBasketsPeer::PROFILES_ID, $this->profiles_id);

				$count = ProfilesBasketsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilesBasketsPeer::PROFILES_ID, $this->profiles_id);

				if (!isset($this->lastProfilesBasketsCriteria) || !$this->lastProfilesBasketsCriteria->equals($criteria)) {
					$count = ProfilesBasketsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collProfilesBasketss);
				}
			} else {
				$count = count($this->collProfilesBasketss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProfilesBaskets object to this object
	 * through the ProfilesBaskets foreign key attribute.
	 *
	 * @param      ProfilesBaskets $l ProfilesBaskets
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfilesBaskets(ProfilesBaskets $l)
	{
		if ($this->collProfilesBasketss === null) {
			$this->initProfilesBasketss();
		}
		if (!in_array($l, $this->collProfilesBasketss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilesBasketss, $l);
			$l->setProfiles($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Profiles is new, it will return
	 * an empty collection; or if this Profiles has previously
	 * been saved, it will retrieve related ProfilesBasketss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Profiles.
	 */
	public function getProfilesBasketssJoinTracks($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesBasketss === null) {
			if ($this->isNew()) {
				$this->collProfilesBasketss = array();
			} else {

				$criteria->add(ProfilesBasketsPeer::PROFILES_ID, $this->profiles_id);

				$this->collProfilesBasketss = ProfilesBasketsPeer::doSelectJoinTracks($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilesBasketsPeer::PROFILES_ID, $this->profiles_id);

			if (!isset($this->lastProfilesBasketsCriteria) || !$this->lastProfilesBasketsCriteria->equals($criteria)) {
				$this->collProfilesBasketss = ProfilesBasketsPeer::doSelectJoinTracks($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilesBasketsCriteria = $criteria;

		return $this->collProfilesBasketss;
	}

	/**
	 * Clears out the collProfilesUrlss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilesUrlss()
	 */
	public function clearProfilesUrlss()
	{
		$this->collProfilesUrlss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilesUrlss collection (array).
	 *
	 * By default this just sets the collProfilesUrlss collection to an empty array (like clearcollProfilesUrlss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilesUrlss()
	{
		$this->collProfilesUrlss = array();
	}

	/**
	 * Gets an array of ProfilesUrls objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profiles has previously been saved, it will retrieve
	 * related ProfilesUrlss from storage. If this Profiles is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProfilesUrls[]
	 * @throws     PropelException
	 */
	public function getProfilesUrlss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesUrlss === null) {
			if ($this->isNew()) {
			   $this->collProfilesUrlss = array();
			} else {

				$criteria->add(ProfilesUrlsPeer::PROFILES_ID, $this->profiles_id);

				ProfilesUrlsPeer::addSelectColumns($criteria);
				$this->collProfilesUrlss = ProfilesUrlsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilesUrlsPeer::PROFILES_ID, $this->profiles_id);

				ProfilesUrlsPeer::addSelectColumns($criteria);
				if (!isset($this->lastProfilesUrlsCriteria) || !$this->lastProfilesUrlsCriteria->equals($criteria)) {
					$this->collProfilesUrlss = ProfilesUrlsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfilesUrlsCriteria = $criteria;
		return $this->collProfilesUrlss;
	}

	/**
	 * Returns the number of related ProfilesUrls objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProfilesUrls objects.
	 * @throws     PropelException
	 */
	public function countProfilesUrlss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilesUrlss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilesUrlsPeer::PROFILES_ID, $this->profiles_id);

				$count = ProfilesUrlsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilesUrlsPeer::PROFILES_ID, $this->profiles_id);

				if (!isset($this->lastProfilesUrlsCriteria) || !$this->lastProfilesUrlsCriteria->equals($criteria)) {
					$count = ProfilesUrlsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collProfilesUrlss);
				}
			} else {
				$count = count($this->collProfilesUrlss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProfilesUrls object to this object
	 * through the ProfilesUrls foreign key attribute.
	 *
	 * @param      ProfilesUrls $l ProfilesUrls
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfilesUrls(ProfilesUrls $l)
	{
		if ($this->collProfilesUrlss === null) {
			$this->initProfilesUrlss();
		}
		if (!in_array($l, $this->collProfilesUrlss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilesUrlss, $l);
			$l->setProfiles($this);
		}
	}

	/**
	 * Clears out the collProfilesViewedsRelatedByArtistsId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilesViewedsRelatedByArtistsId()
	 */
	public function clearProfilesViewedsRelatedByArtistsId()
	{
		$this->collProfilesViewedsRelatedByArtistsId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilesViewedsRelatedByArtistsId collection (array).
	 *
	 * By default this just sets the collProfilesViewedsRelatedByArtistsId collection to an empty array (like clearcollProfilesViewedsRelatedByArtistsId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilesViewedsRelatedByArtistsId()
	{
		$this->collProfilesViewedsRelatedByArtistsId = array();
	}

	/**
	 * Gets an array of ProfilesViewed objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profiles has previously been saved, it will retrieve
	 * related ProfilesViewedsRelatedByArtistsId from storage. If this Profiles is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProfilesViewed[]
	 * @throws     PropelException
	 */
	public function getProfilesViewedsRelatedByArtistsId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesViewedsRelatedByArtistsId === null) {
			if ($this->isNew()) {
			   $this->collProfilesViewedsRelatedByArtistsId = array();
			} else {

				$criteria->add(ProfilesViewedPeer::ARTISTS_ID, $this->profiles_id);

				ProfilesViewedPeer::addSelectColumns($criteria);
				$this->collProfilesViewedsRelatedByArtistsId = ProfilesViewedPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilesViewedPeer::ARTISTS_ID, $this->profiles_id);

				ProfilesViewedPeer::addSelectColumns($criteria);
				if (!isset($this->lastProfilesViewedRelatedByArtistsIdCriteria) || !$this->lastProfilesViewedRelatedByArtistsIdCriteria->equals($criteria)) {
					$this->collProfilesViewedsRelatedByArtistsId = ProfilesViewedPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfilesViewedRelatedByArtistsIdCriteria = $criteria;
		return $this->collProfilesViewedsRelatedByArtistsId;
	}

	/**
	 * Returns the number of related ProfilesViewed objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProfilesViewed objects.
	 * @throws     PropelException
	 */
	public function countProfilesViewedsRelatedByArtistsId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilesViewedsRelatedByArtistsId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilesViewedPeer::ARTISTS_ID, $this->profiles_id);

				$count = ProfilesViewedPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilesViewedPeer::ARTISTS_ID, $this->profiles_id);

				if (!isset($this->lastProfilesViewedRelatedByArtistsIdCriteria) || !$this->lastProfilesViewedRelatedByArtistsIdCriteria->equals($criteria)) {
					$count = ProfilesViewedPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collProfilesViewedsRelatedByArtistsId);
				}
			} else {
				$count = count($this->collProfilesViewedsRelatedByArtistsId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProfilesViewed object to this object
	 * through the ProfilesViewed foreign key attribute.
	 *
	 * @param      ProfilesViewed $l ProfilesViewed
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfilesViewedRelatedByArtistsId(ProfilesViewed $l)
	{
		if ($this->collProfilesViewedsRelatedByArtistsId === null) {
			$this->initProfilesViewedsRelatedByArtistsId();
		}
		if (!in_array($l, $this->collProfilesViewedsRelatedByArtistsId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilesViewedsRelatedByArtistsId, $l);
			$l->setProfilesRelatedByArtistsId($this);
		}
	}

	/**
	 * Clears out the collProfilesViewedsRelatedByProfilesId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilesViewedsRelatedByProfilesId()
	 */
	public function clearProfilesViewedsRelatedByProfilesId()
	{
		$this->collProfilesViewedsRelatedByProfilesId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilesViewedsRelatedByProfilesId collection (array).
	 *
	 * By default this just sets the collProfilesViewedsRelatedByProfilesId collection to an empty array (like clearcollProfilesViewedsRelatedByProfilesId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilesViewedsRelatedByProfilesId()
	{
		$this->collProfilesViewedsRelatedByProfilesId = array();
	}

	/**
	 * Gets an array of ProfilesViewed objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profiles has previously been saved, it will retrieve
	 * related ProfilesViewedsRelatedByProfilesId from storage. If this Profiles is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProfilesViewed[]
	 * @throws     PropelException
	 */
	public function getProfilesViewedsRelatedByProfilesId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesViewedsRelatedByProfilesId === null) {
			if ($this->isNew()) {
			   $this->collProfilesViewedsRelatedByProfilesId = array();
			} else {

				$criteria->add(ProfilesViewedPeer::PROFILES_ID, $this->profiles_id);

				ProfilesViewedPeer::addSelectColumns($criteria);
				$this->collProfilesViewedsRelatedByProfilesId = ProfilesViewedPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilesViewedPeer::PROFILES_ID, $this->profiles_id);

				ProfilesViewedPeer::addSelectColumns($criteria);
				if (!isset($this->lastProfilesViewedRelatedByProfilesIdCriteria) || !$this->lastProfilesViewedRelatedByProfilesIdCriteria->equals($criteria)) {
					$this->collProfilesViewedsRelatedByProfilesId = ProfilesViewedPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfilesViewedRelatedByProfilesIdCriteria = $criteria;
		return $this->collProfilesViewedsRelatedByProfilesId;
	}

	/**
	 * Returns the number of related ProfilesViewed objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProfilesViewed objects.
	 * @throws     PropelException
	 */
	public function countProfilesViewedsRelatedByProfilesId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilesViewedsRelatedByProfilesId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilesViewedPeer::PROFILES_ID, $this->profiles_id);

				$count = ProfilesViewedPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilesViewedPeer::PROFILES_ID, $this->profiles_id);

				if (!isset($this->lastProfilesViewedRelatedByProfilesIdCriteria) || !$this->lastProfilesViewedRelatedByProfilesIdCriteria->equals($criteria)) {
					$count = ProfilesViewedPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collProfilesViewedsRelatedByProfilesId);
				}
			} else {
				$count = count($this->collProfilesViewedsRelatedByProfilesId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProfilesViewed object to this object
	 * through the ProfilesViewed foreign key attribute.
	 *
	 * @param      ProfilesViewed $l ProfilesViewed
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfilesViewedRelatedByProfilesId(ProfilesViewed $l)
	{
		if ($this->collProfilesViewedsRelatedByProfilesId === null) {
			$this->initProfilesViewedsRelatedByProfilesId();
		}
		if (!in_array($l, $this->collProfilesViewedsRelatedByProfilesId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilesViewedsRelatedByProfilesId, $l);
			$l->setProfilesRelatedByProfilesId($this);
		}
	}

	/**
	 * Clears out the collProfilesWishlistss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilesWishlistss()
	 */
	public function clearProfilesWishlistss()
	{
		$this->collProfilesWishlistss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilesWishlistss collection (array).
	 *
	 * By default this just sets the collProfilesWishlistss collection to an empty array (like clearcollProfilesWishlistss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilesWishlistss()
	{
		$this->collProfilesWishlistss = array();
	}

	/**
	 * Gets an array of ProfilesWishlists objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profiles has previously been saved, it will retrieve
	 * related ProfilesWishlistss from storage. If this Profiles is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProfilesWishlists[]
	 * @throws     PropelException
	 */
	public function getProfilesWishlistss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesWishlistss === null) {
			if ($this->isNew()) {
			   $this->collProfilesWishlistss = array();
			} else {

				$criteria->add(ProfilesWishlistsPeer::PROFILES_ID, $this->profiles_id);

				ProfilesWishlistsPeer::addSelectColumns($criteria);
				$this->collProfilesWishlistss = ProfilesWishlistsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilesWishlistsPeer::PROFILES_ID, $this->profiles_id);

				ProfilesWishlistsPeer::addSelectColumns($criteria);
				if (!isset($this->lastProfilesWishlistsCriteria) || !$this->lastProfilesWishlistsCriteria->equals($criteria)) {
					$this->collProfilesWishlistss = ProfilesWishlistsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfilesWishlistsCriteria = $criteria;
		return $this->collProfilesWishlistss;
	}

	/**
	 * Returns the number of related ProfilesWishlists objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProfilesWishlists objects.
	 * @throws     PropelException
	 */
	public function countProfilesWishlistss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilesWishlistss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilesWishlistsPeer::PROFILES_ID, $this->profiles_id);

				$count = ProfilesWishlistsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilesWishlistsPeer::PROFILES_ID, $this->profiles_id);

				if (!isset($this->lastProfilesWishlistsCriteria) || !$this->lastProfilesWishlistsCriteria->equals($criteria)) {
					$count = ProfilesWishlistsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collProfilesWishlistss);
				}
			} else {
				$count = count($this->collProfilesWishlistss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProfilesWishlists object to this object
	 * through the ProfilesWishlists foreign key attribute.
	 *
	 * @param      ProfilesWishlists $l ProfilesWishlists
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfilesWishlists(ProfilesWishlists $l)
	{
		if ($this->collProfilesWishlistss === null) {
			$this->initProfilesWishlistss();
		}
		if (!in_array($l, $this->collProfilesWishlistss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilesWishlistss, $l);
			$l->setProfiles($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Profiles is new, it will return
	 * an empty collection; or if this Profiles has previously
	 * been saved, it will retrieve related ProfilesWishlistss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Profiles.
	 */
	public function getProfilesWishlistssJoinTracks($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesWishlistss === null) {
			if ($this->isNew()) {
				$this->collProfilesWishlistss = array();
			} else {

				$criteria->add(ProfilesWishlistsPeer::PROFILES_ID, $this->profiles_id);

				$this->collProfilesWishlistss = ProfilesWishlistsPeer::doSelectJoinTracks($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilesWishlistsPeer::PROFILES_ID, $this->profiles_id);

			if (!isset($this->lastProfilesWishlistsCriteria) || !$this->lastProfilesWishlistsCriteria->equals($criteria)) {
				$this->collProfilesWishlistss = ProfilesWishlistsPeer::doSelectJoinTracks($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilesWishlistsCriteria = $criteria;

		return $this->collProfilesWishlistss;
	}

	/**
	 * Clears out the collTrackss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTrackss()
	 */
	public function clearTrackss()
	{
		$this->collTrackss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTrackss collection (array).
	 *
	 * By default this just sets the collTrackss collection to an empty array (like clearcollTrackss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTrackss()
	{
		$this->collTrackss = array();
	}

	/**
	 * Gets an array of Tracks objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profiles has previously been saved, it will retrieve
	 * related Trackss from storage. If this Profiles is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tracks[]
	 * @throws     PropelException
	 */
	public function getTrackss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTrackss === null) {
			if ($this->isNew()) {
			   $this->collTrackss = array();
			} else {

				$criteria->add(TracksPeer::PROFILES_ID, $this->profiles_id);

				TracksPeer::addSelectColumns($criteria);
				$this->collTrackss = TracksPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TracksPeer::PROFILES_ID, $this->profiles_id);

				TracksPeer::addSelectColumns($criteria);
				if (!isset($this->lastTracksCriteria) || !$this->lastTracksCriteria->equals($criteria)) {
					$this->collTrackss = TracksPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTracksCriteria = $criteria;
		return $this->collTrackss;
	}

	/**
	 * Returns the number of related Tracks objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tracks objects.
	 * @throws     PropelException
	 */
	public function countTrackss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTrackss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TracksPeer::PROFILES_ID, $this->profiles_id);

				$count = TracksPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TracksPeer::PROFILES_ID, $this->profiles_id);

				if (!isset($this->lastTracksCriteria) || !$this->lastTracksCriteria->equals($criteria)) {
					$count = TracksPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTrackss);
				}
			} else {
				$count = count($this->collTrackss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tracks object to this object
	 * through the Tracks foreign key attribute.
	 *
	 * @param      Tracks $l Tracks
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTracks(Tracks $l)
	{
		if ($this->collTrackss === null) {
			$this->initTrackss();
		}
		if (!in_array($l, $this->collTrackss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTrackss, $l);
			$l->setProfiles($this);
		}
	}

	/**
	 * Clears out the collTracksPlayeds collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTracksPlayeds()
	 */
	public function clearTracksPlayeds()
	{
		$this->collTracksPlayeds = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTracksPlayeds collection (array).
	 *
	 * By default this just sets the collTracksPlayeds collection to an empty array (like clearcollTracksPlayeds());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTracksPlayeds()
	{
		$this->collTracksPlayeds = array();
	}

	/**
	 * Gets an array of TracksPlayed objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profiles has previously been saved, it will retrieve
	 * related TracksPlayeds from storage. If this Profiles is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TracksPlayed[]
	 * @throws     PropelException
	 */
	public function getTracksPlayeds($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTracksPlayeds === null) {
			if ($this->isNew()) {
			   $this->collTracksPlayeds = array();
			} else {

				$criteria->add(TracksPlayedPeer::PROFILES_ID, $this->profiles_id);

				TracksPlayedPeer::addSelectColumns($criteria);
				$this->collTracksPlayeds = TracksPlayedPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TracksPlayedPeer::PROFILES_ID, $this->profiles_id);

				TracksPlayedPeer::addSelectColumns($criteria);
				if (!isset($this->lastTracksPlayedCriteria) || !$this->lastTracksPlayedCriteria->equals($criteria)) {
					$this->collTracksPlayeds = TracksPlayedPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTracksPlayedCriteria = $criteria;
		return $this->collTracksPlayeds;
	}

	/**
	 * Returns the number of related TracksPlayed objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TracksPlayed objects.
	 * @throws     PropelException
	 */
	public function countTracksPlayeds(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTracksPlayeds === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TracksPlayedPeer::PROFILES_ID, $this->profiles_id);

				$count = TracksPlayedPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TracksPlayedPeer::PROFILES_ID, $this->profiles_id);

				if (!isset($this->lastTracksPlayedCriteria) || !$this->lastTracksPlayedCriteria->equals($criteria)) {
					$count = TracksPlayedPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTracksPlayeds);
				}
			} else {
				$count = count($this->collTracksPlayeds);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TracksPlayed object to this object
	 * through the TracksPlayed foreign key attribute.
	 *
	 * @param      TracksPlayed $l TracksPlayed
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTracksPlayed(TracksPlayed $l)
	{
		if ($this->collTracksPlayeds === null) {
			$this->initTracksPlayeds();
		}
		if (!in_array($l, $this->collTracksPlayeds, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTracksPlayeds, $l);
			$l->setProfiles($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Profiles is new, it will return
	 * an empty collection; or if this Profiles has previously
	 * been saved, it will retrieve related TracksPlayeds from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Profiles.
	 */
	public function getTracksPlayedsJoinTracks($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTracksPlayeds === null) {
			if ($this->isNew()) {
				$this->collTracksPlayeds = array();
			} else {

				$criteria->add(TracksPlayedPeer::PROFILES_ID, $this->profiles_id);

				$this->collTracksPlayeds = TracksPlayedPeer::doSelectJoinTracks($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TracksPlayedPeer::PROFILES_ID, $this->profiles_id);

			if (!isset($this->lastTracksPlayedCriteria) || !$this->lastTracksPlayedCriteria->equals($criteria)) {
				$this->collTracksPlayeds = TracksPlayedPeer::doSelectJoinTracks($criteria, $con, $join_behavior);
			}
		}
		$this->lastTracksPlayedCriteria = $criteria;

		return $this->collTracksPlayeds;
	}

	/**
	 * Clears out the collTransactionss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTransactionss()
	 */
	public function clearTransactionss()
	{
		$this->collTransactionss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTransactionss collection (array).
	 *
	 * By default this just sets the collTransactionss collection to an empty array (like clearcollTransactionss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTransactionss()
	{
		$this->collTransactionss = array();
	}

	/**
	 * Gets an array of Transactions objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profiles has previously been saved, it will retrieve
	 * related Transactionss from storage. If this Profiles is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Transactions[]
	 * @throws     PropelException
	 */
	public function getTransactionss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactionss === null) {
			if ($this->isNew()) {
			   $this->collTransactionss = array();
			} else {

				$criteria->add(TransactionsPeer::PROFILES_ID, $this->profiles_id);

				TransactionsPeer::addSelectColumns($criteria);
				$this->collTransactionss = TransactionsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TransactionsPeer::PROFILES_ID, $this->profiles_id);

				TransactionsPeer::addSelectColumns($criteria);
				if (!isset($this->lastTransactionsCriteria) || !$this->lastTransactionsCriteria->equals($criteria)) {
					$this->collTransactionss = TransactionsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTransactionsCriteria = $criteria;
		return $this->collTransactionss;
	}

	/**
	 * Returns the number of related Transactions objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Transactions objects.
	 * @throws     PropelException
	 */
	public function countTransactionss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTransactionss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TransactionsPeer::PROFILES_ID, $this->profiles_id);

				$count = TransactionsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TransactionsPeer::PROFILES_ID, $this->profiles_id);

				if (!isset($this->lastTransactionsCriteria) || !$this->lastTransactionsCriteria->equals($criteria)) {
					$count = TransactionsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTransactionss);
				}
			} else {
				$count = count($this->collTransactionss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Transactions object to this object
	 * through the Transactions foreign key attribute.
	 *
	 * @param      Transactions $l Transactions
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTransactions(Transactions $l)
	{
		if ($this->collTransactionss === null) {
			$this->initTransactionss();
		}
		if (!in_array($l, $this->collTransactionss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTransactionss, $l);
			$l->setProfiles($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Profiles is new, it will return
	 * an empty collection; or if this Profiles has previously
	 * been saved, it will retrieve related Transactionss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Profiles.
	 */
	public function getTransactionssJoinPaypalPaymentInfo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactionss === null) {
			if ($this->isNew()) {
				$this->collTransactionss = array();
			} else {

				$criteria->add(TransactionsPeer::PROFILES_ID, $this->profiles_id);

				$this->collTransactionss = TransactionsPeer::doSelectJoinPaypalPaymentInfo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionsPeer::PROFILES_ID, $this->profiles_id);

			if (!isset($this->lastTransactionsCriteria) || !$this->lastTransactionsCriteria->equals($criteria)) {
				$this->collTransactionss = TransactionsPeer::doSelectJoinPaypalPaymentInfo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionsCriteria = $criteria;

		return $this->collTransactionss;
	}

	/**
	 * Clears out the collTransactionsSaldos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTransactionsSaldos()
	 */
	public function clearTransactionsSaldos()
	{
		$this->collTransactionsSaldos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTransactionsSaldos collection (array).
	 *
	 * By default this just sets the collTransactionsSaldos collection to an empty array (like clearcollTransactionsSaldos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTransactionsSaldos()
	{
		$this->collTransactionsSaldos = array();
	}

	/**
	 * Gets an array of TransactionsSaldo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profiles has previously been saved, it will retrieve
	 * related TransactionsSaldos from storage. If this Profiles is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TransactionsSaldo[]
	 * @throws     PropelException
	 */
	public function getTransactionsSaldos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactionsSaldos === null) {
			if ($this->isNew()) {
			   $this->collTransactionsSaldos = array();
			} else {

				$criteria->add(TransactionsSaldoPeer::PROFILES_ID, $this->profiles_id);

				TransactionsSaldoPeer::addSelectColumns($criteria);
				$this->collTransactionsSaldos = TransactionsSaldoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TransactionsSaldoPeer::PROFILES_ID, $this->profiles_id);

				TransactionsSaldoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTransactionsSaldoCriteria) || !$this->lastTransactionsSaldoCriteria->equals($criteria)) {
					$this->collTransactionsSaldos = TransactionsSaldoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTransactionsSaldoCriteria = $criteria;
		return $this->collTransactionsSaldos;
	}

	/**
	 * Returns the number of related TransactionsSaldo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TransactionsSaldo objects.
	 * @throws     PropelException
	 */
	public function countTransactionsSaldos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTransactionsSaldos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TransactionsSaldoPeer::PROFILES_ID, $this->profiles_id);

				$count = TransactionsSaldoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TransactionsSaldoPeer::PROFILES_ID, $this->profiles_id);

				if (!isset($this->lastTransactionsSaldoCriteria) || !$this->lastTransactionsSaldoCriteria->equals($criteria)) {
					$count = TransactionsSaldoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTransactionsSaldos);
				}
			} else {
				$count = count($this->collTransactionsSaldos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TransactionsSaldo object to this object
	 * through the TransactionsSaldo foreign key attribute.
	 *
	 * @param      TransactionsSaldo $l TransactionsSaldo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTransactionsSaldo(TransactionsSaldo $l)
	{
		if ($this->collTransactionsSaldos === null) {
			$this->initTransactionsSaldos();
		}
		if (!in_array($l, $this->collTransactionsSaldos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTransactionsSaldos, $l);
			$l->setProfiles($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Profiles is new, it will return
	 * an empty collection; or if this Profiles has previously
	 * been saved, it will retrieve related TransactionsSaldos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Profiles.
	 */
	public function getTransactionsSaldosJoinTransactionsTracks($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactionsSaldos === null) {
			if ($this->isNew()) {
				$this->collTransactionsSaldos = array();
			} else {

				$criteria->add(TransactionsSaldoPeer::PROFILES_ID, $this->profiles_id);

				$this->collTransactionsSaldos = TransactionsSaldoPeer::doSelectJoinTransactionsTracks($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionsSaldoPeer::PROFILES_ID, $this->profiles_id);

			if (!isset($this->lastTransactionsSaldoCriteria) || !$this->lastTransactionsSaldoCriteria->equals($criteria)) {
				$this->collTransactionsSaldos = TransactionsSaldoPeer::doSelectJoinTransactionsTracks($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionsSaldoCriteria = $criteria;

		return $this->collTransactionsSaldos;
	}

	/**
	 * Clears out the collWithdrawss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addWithdrawss()
	 */
	public function clearWithdrawss()
	{
		$this->collWithdrawss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collWithdrawss collection (array).
	 *
	 * By default this just sets the collWithdrawss collection to an empty array (like clearcollWithdrawss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initWithdrawss()
	{
		$this->collWithdrawss = array();
	}

	/**
	 * Gets an array of Withdraws objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profiles has previously been saved, it will retrieve
	 * related Withdrawss from storage. If this Profiles is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Withdraws[]
	 * @throws     PropelException
	 */
	public function getWithdrawss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWithdrawss === null) {
			if ($this->isNew()) {
			   $this->collWithdrawss = array();
			} else {

				$criteria->add(WithdrawsPeer::PROFILES_ID, $this->profiles_id);

				WithdrawsPeer::addSelectColumns($criteria);
				$this->collWithdrawss = WithdrawsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(WithdrawsPeer::PROFILES_ID, $this->profiles_id);

				WithdrawsPeer::addSelectColumns($criteria);
				if (!isset($this->lastWithdrawsCriteria) || !$this->lastWithdrawsCriteria->equals($criteria)) {
					$this->collWithdrawss = WithdrawsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastWithdrawsCriteria = $criteria;
		return $this->collWithdrawss;
	}

	/**
	 * Returns the number of related Withdraws objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Withdraws objects.
	 * @throws     PropelException
	 */
	public function countWithdrawss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collWithdrawss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(WithdrawsPeer::PROFILES_ID, $this->profiles_id);

				$count = WithdrawsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(WithdrawsPeer::PROFILES_ID, $this->profiles_id);

				if (!isset($this->lastWithdrawsCriteria) || !$this->lastWithdrawsCriteria->equals($criteria)) {
					$count = WithdrawsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collWithdrawss);
				}
			} else {
				$count = count($this->collWithdrawss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Withdraws object to this object
	 * through the Withdraws foreign key attribute.
	 *
	 * @param      Withdraws $l Withdraws
	 * @return     void
	 * @throws     PropelException
	 */
	public function addWithdraws(Withdraws $l)
	{
		if ($this->collWithdrawss === null) {
			$this->initWithdrawss();
		}
		if (!in_array($l, $this->collWithdrawss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collWithdrawss, $l);
			$l->setProfiles($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collProfilesBasketss) {
				foreach ((array) $this->collProfilesBasketss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilesUrlss) {
				foreach ((array) $this->collProfilesUrlss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilesViewedsRelatedByArtistsId) {
				foreach ((array) $this->collProfilesViewedsRelatedByArtistsId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilesViewedsRelatedByProfilesId) {
				foreach ((array) $this->collProfilesViewedsRelatedByProfilesId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilesWishlistss) {
				foreach ((array) $this->collProfilesWishlistss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTrackss) {
				foreach ((array) $this->collTrackss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTracksPlayeds) {
				foreach ((array) $this->collTracksPlayeds as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTransactionss) {
				foreach ((array) $this->collTransactionss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTransactionsSaldos) {
				foreach ((array) $this->collTransactionsSaldos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collWithdrawss) {
				foreach ((array) $this->collWithdrawss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collProfilesBasketss = null;
		$this->collProfilesUrlss = null;
		$this->collProfilesViewedsRelatedByArtistsId = null;
		$this->collProfilesViewedsRelatedByProfilesId = null;
		$this->collProfilesWishlistss = null;
		$this->collTrackss = null;
		$this->collTracksPlayeds = null;
		$this->collTransactionss = null;
		$this->collTransactionsSaldos = null;
		$this->collWithdrawss = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseProfiles:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseProfiles::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseProfiles
