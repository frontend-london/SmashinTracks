<?php

/**
 * Base class that represents a row from the 'paypal_payment_info' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 03/02/11 10:47:33
 *
 * @package    lib.model.om
 */
abstract class BasePaypalPaymentInfo extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PaypalPaymentInfoPeer
	 */
	protected static $peer;

	/**
	 * The value for the firstname field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $firstname;

	/**
	 * The value for the lastname field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $lastname;

	/**
	 * The value for the buyer_email field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $buyer_email;

	/**
	 * The value for the street field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $street;

	/**
	 * The value for the city field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the state field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the zipcode field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $zipcode;

	/**
	 * The value for the memo field.
	 * @var        string
	 */
	protected $memo;

	/**
	 * The value for the itemname field.
	 * @var        string
	 */
	protected $itemname;

	/**
	 * The value for the itemnumber field.
	 * @var        string
	 */
	protected $itemnumber;

	/**
	 * The value for the os0 field.
	 * @var        string
	 */
	protected $os0;

	/**
	 * The value for the on0 field.
	 * @var        string
	 */
	protected $on0;

	/**
	 * The value for the os1 field.
	 * @var        string
	 */
	protected $os1;

	/**
	 * The value for the on1 field.
	 * @var        string
	 */
	protected $on1;

	/**
	 * The value for the quantity field.
	 * @var        string
	 */
	protected $quantity;

	/**
	 * The value for the paymentdate field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $paymentdate;

	/**
	 * The value for the paymenttype field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $paymenttype;

	/**
	 * The value for the txnid field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $txnid;

	/**
	 * The value for the mc_gross field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $mc_gross;

	/**
	 * The value for the mc_fee field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $mc_fee;

	/**
	 * The value for the paymentstatus field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $paymentstatus;

	/**
	 * The value for the pendingreason field.
	 * @var        string
	 */
	protected $pendingreason;

	/**
	 * The value for the txntype field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $txntype;

	/**
	 * The value for the tax field.
	 * @var        string
	 */
	protected $tax;

	/**
	 * The value for the mc_currency field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $mc_currency;

	/**
	 * The value for the reasoncode field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $reasoncode;

	/**
	 * The value for the custom field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $custom;

	/**
	 * The value for the country field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $country;

	/**
	 * The value for the datecreation field.
	 * Note: this column has a database default value of: NULL
	 * @var        string
	 */
	protected $datecreation;

	/**
	 * @var        array PaypalCartInfo[] Collection to store aggregation of PaypalCartInfo objects.
	 */
	protected $collPaypalCartInfos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPaypalCartInfos.
	 */
	private $lastPaypalCartInfoCriteria = null;

	/**
	 * @var        array Transactions[] Collection to store aggregation of Transactions objects.
	 */
	protected $collTransactionss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTransactionss.
	 */
	private $lastTransactionsCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'PaypalPaymentInfoPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->firstname = '';
		$this->lastname = '';
		$this->buyer_email = '';
		$this->street = '';
		$this->city = '';
		$this->state = '';
		$this->zipcode = '';
		$this->paymentdate = '';
		$this->paymenttype = '';
		$this->txnid = '';
		$this->mc_gross = '';
		$this->mc_fee = '';
		$this->paymentstatus = '';
		$this->txntype = '';
		$this->mc_currency = '';
		$this->reasoncode = '';
		$this->custom = '';
		$this->country = '';
		$this->datecreation = NULL;
	}

	/**
	 * Initializes internal state of BasePaypalPaymentInfo object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [firstname] column value.
	 * 
	 * @return     string
	 */
	public function getFirstname()
	{
		return $this->firstname;
	}

	/**
	 * Get the [lastname] column value.
	 * 
	 * @return     string
	 */
	public function getLastname()
	{
		return $this->lastname;
	}

	/**
	 * Get the [buyer_email] column value.
	 * 
	 * @return     string
	 */
	public function getBuyerEmail()
	{
		return $this->buyer_email;
	}

	/**
	 * Get the [street] column value.
	 * 
	 * @return     string
	 */
	public function getStreet()
	{
		return $this->street;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [zipcode] column value.
	 * 
	 * @return     string
	 */
	public function getZipcode()
	{
		return $this->zipcode;
	}

	/**
	 * Get the [memo] column value.
	 * 
	 * @return     string
	 */
	public function getMemo()
	{
		return $this->memo;
	}

	/**
	 * Get the [itemname] column value.
	 * 
	 * @return     string
	 */
	public function getItemname()
	{
		return $this->itemname;
	}

	/**
	 * Get the [itemnumber] column value.
	 * 
	 * @return     string
	 */
	public function getItemnumber()
	{
		return $this->itemnumber;
	}

	/**
	 * Get the [os0] column value.
	 * 
	 * @return     string
	 */
	public function getOs0()
	{
		return $this->os0;
	}

	/**
	 * Get the [on0] column value.
	 * 
	 * @return     string
	 */
	public function getOn0()
	{
		return $this->on0;
	}

	/**
	 * Get the [os1] column value.
	 * 
	 * @return     string
	 */
	public function getOs1()
	{
		return $this->os1;
	}

	/**
	 * Get the [on1] column value.
	 * 
	 * @return     string
	 */
	public function getOn1()
	{
		return $this->on1;
	}

	/**
	 * Get the [quantity] column value.
	 * 
	 * @return     string
	 */
	public function getQuantity()
	{
		return $this->quantity;
	}

	/**
	 * Get the [paymentdate] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentdate()
	{
		return $this->paymentdate;
	}

	/**
	 * Get the [paymenttype] column value.
	 * 
	 * @return     string
	 */
	public function getPaymenttype()
	{
		return $this->paymenttype;
	}

	/**
	 * Get the [txnid] column value.
	 * 
	 * @return     string
	 */
	public function getTxnid()
	{
		return $this->txnid;
	}

	/**
	 * Get the [mc_gross] column value.
	 * 
	 * @return     string
	 */
	public function getMcGross()
	{
		return $this->mc_gross;
	}

	/**
	 * Get the [mc_fee] column value.
	 * 
	 * @return     string
	 */
	public function getMcFee()
	{
		return $this->mc_fee;
	}

	/**
	 * Get the [paymentstatus] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentstatus()
	{
		return $this->paymentstatus;
	}

	/**
	 * Get the [pendingreason] column value.
	 * 
	 * @return     string
	 */
	public function getPendingreason()
	{
		return $this->pendingreason;
	}

	/**
	 * Get the [txntype] column value.
	 * 
	 * @return     string
	 */
	public function getTxntype()
	{
		return $this->txntype;
	}

	/**
	 * Get the [tax] column value.
	 * 
	 * @return     string
	 */
	public function getTax()
	{
		return $this->tax;
	}

	/**
	 * Get the [mc_currency] column value.
	 * 
	 * @return     string
	 */
	public function getMcCurrency()
	{
		return $this->mc_currency;
	}

	/**
	 * Get the [reasoncode] column value.
	 * 
	 * @return     string
	 */
	public function getReasoncode()
	{
		return $this->reasoncode;
	}

	/**
	 * Get the [custom] column value.
	 * 
	 * @return     string
	 */
	public function getCustom()
	{
		return $this->custom;
	}

	/**
	 * Get the [country] column value.
	 * 
	 * @return     string
	 */
	public function getCountry()
	{
		return $this->country;
	}

	/**
	 * Get the [optionally formatted] temporal [datecreation] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatecreation($format = 'Y-m-d')
	{
		if ($this->datecreation === null) {
			return null;
		}


		if ($this->datecreation === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datecreation);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datecreation, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [firstname] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setFirstname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->firstname !== $v || $this->isNew()) {
			$this->firstname = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::FIRSTNAME;
		}

		return $this;
	} // setFirstname()

	/**
	 * Set the value of [lastname] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setLastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastname !== $v || $this->isNew()) {
			$this->lastname = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::LASTNAME;
		}

		return $this;
	} // setLastname()

	/**
	 * Set the value of [buyer_email] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setBuyerEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->buyer_email !== $v || $this->isNew()) {
			$this->buyer_email = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::BUYER_EMAIL;
		}

		return $this;
	} // setBuyerEmail()

	/**
	 * Set the value of [street] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setStreet($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->street !== $v || $this->isNew()) {
			$this->street = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::STREET;
		}

		return $this;
	} // setStreet()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v || $this->isNew()) {
			$this->city = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v || $this->isNew()) {
			$this->state = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [zipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setZipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zipcode !== $v || $this->isNew()) {
			$this->zipcode = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::ZIPCODE;
		}

		return $this;
	} // setZipcode()

	/**
	 * Set the value of [memo] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setMemo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->memo !== $v) {
			$this->memo = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::MEMO;
		}

		return $this;
	} // setMemo()

	/**
	 * Set the value of [itemname] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setItemname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->itemname !== $v) {
			$this->itemname = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::ITEMNAME;
		}

		return $this;
	} // setItemname()

	/**
	 * Set the value of [itemnumber] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setItemnumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->itemnumber !== $v) {
			$this->itemnumber = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::ITEMNUMBER;
		}

		return $this;
	} // setItemnumber()

	/**
	 * Set the value of [os0] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setOs0($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->os0 !== $v) {
			$this->os0 = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::OS0;
		}

		return $this;
	} // setOs0()

	/**
	 * Set the value of [on0] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setOn0($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->on0 !== $v) {
			$this->on0 = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::ON0;
		}

		return $this;
	} // setOn0()

	/**
	 * Set the value of [os1] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setOs1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->os1 !== $v) {
			$this->os1 = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::OS1;
		}

		return $this;
	} // setOs1()

	/**
	 * Set the value of [on1] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setOn1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->on1 !== $v) {
			$this->on1 = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::ON1;
		}

		return $this;
	} // setOn1()

	/**
	 * Set the value of [quantity] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setQuantity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->quantity !== $v) {
			$this->quantity = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::QUANTITY;
		}

		return $this;
	} // setQuantity()

	/**
	 * Set the value of [paymentdate] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setPaymentdate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->paymentdate !== $v || $this->isNew()) {
			$this->paymentdate = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::PAYMENTDATE;
		}

		return $this;
	} // setPaymentdate()

	/**
	 * Set the value of [paymenttype] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setPaymenttype($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->paymenttype !== $v || $this->isNew()) {
			$this->paymenttype = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::PAYMENTTYPE;
		}

		return $this;
	} // setPaymenttype()

	/**
	 * Set the value of [txnid] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setTxnid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->txnid !== $v || $this->isNew()) {
			$this->txnid = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::TXNID;
		}

		return $this;
	} // setTxnid()

	/**
	 * Set the value of [mc_gross] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setMcGross($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mc_gross !== $v || $this->isNew()) {
			$this->mc_gross = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::MC_GROSS;
		}

		return $this;
	} // setMcGross()

	/**
	 * Set the value of [mc_fee] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setMcFee($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mc_fee !== $v || $this->isNew()) {
			$this->mc_fee = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::MC_FEE;
		}

		return $this;
	} // setMcFee()

	/**
	 * Set the value of [paymentstatus] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setPaymentstatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->paymentstatus !== $v || $this->isNew()) {
			$this->paymentstatus = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::PAYMENTSTATUS;
		}

		return $this;
	} // setPaymentstatus()

	/**
	 * Set the value of [pendingreason] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setPendingreason($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pendingreason !== $v) {
			$this->pendingreason = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::PENDINGREASON;
		}

		return $this;
	} // setPendingreason()

	/**
	 * Set the value of [txntype] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setTxntype($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->txntype !== $v || $this->isNew()) {
			$this->txntype = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::TXNTYPE;
		}

		return $this;
	} // setTxntype()

	/**
	 * Set the value of [tax] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setTax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tax !== $v) {
			$this->tax = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::TAX;
		}

		return $this;
	} // setTax()

	/**
	 * Set the value of [mc_currency] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setMcCurrency($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mc_currency !== $v || $this->isNew()) {
			$this->mc_currency = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::MC_CURRENCY;
		}

		return $this;
	} // setMcCurrency()

	/**
	 * Set the value of [reasoncode] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setReasoncode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reasoncode !== $v || $this->isNew()) {
			$this->reasoncode = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::REASONCODE;
		}

		return $this;
	} // setReasoncode()

	/**
	 * Set the value of [custom] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setCustom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom !== $v || $this->isNew()) {
			$this->custom = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::CUSTOM;
		}

		return $this;
	} // setCustom()

	/**
	 * Set the value of [country] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country !== $v || $this->isNew()) {
			$this->country = $v;
			$this->modifiedColumns[] = PaypalPaymentInfoPeer::COUNTRY;
		}

		return $this;
	} // setCountry()

	/**
	 * Sets the value of [datecreation] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PaypalPaymentInfo The current object (for fluent API support)
	 */
	public function setDatecreation($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datecreation !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datecreation !== null && $tmpDt = new DateTime($this->datecreation)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					|| ($dt->format('Y-m-d') === NULL) // or the entered value matches the default
					)
			{
				$this->datecreation = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = PaypalPaymentInfoPeer::DATECREATION;
			}
		} // if either are not null

		return $this;
	} // setDatecreation()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->firstname !== '') {
				return false;
			}

			if ($this->lastname !== '') {
				return false;
			}

			if ($this->buyer_email !== '') {
				return false;
			}

			if ($this->street !== '') {
				return false;
			}

			if ($this->city !== '') {
				return false;
			}

			if ($this->state !== '') {
				return false;
			}

			if ($this->zipcode !== '') {
				return false;
			}

			if ($this->paymentdate !== '') {
				return false;
			}

			if ($this->paymenttype !== '') {
				return false;
			}

			if ($this->txnid !== '') {
				return false;
			}

			if ($this->mc_gross !== '') {
				return false;
			}

			if ($this->mc_fee !== '') {
				return false;
			}

			if ($this->paymentstatus !== '') {
				return false;
			}

			if ($this->txntype !== '') {
				return false;
			}

			if ($this->mc_currency !== '') {
				return false;
			}

			if ($this->reasoncode !== '') {
				return false;
			}

			if ($this->custom !== '') {
				return false;
			}

			if ($this->country !== '') {
				return false;
			}

			if ($this->datecreation !== NULL) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->firstname = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->lastname = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->buyer_email = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->street = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->city = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->state = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->zipcode = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->memo = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->itemname = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->itemnumber = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->os0 = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->on0 = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->os1 = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->on1 = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->quantity = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->paymentdate = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->paymenttype = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->txnid = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->mc_gross = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->mc_fee = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->paymentstatus = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->pendingreason = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->txntype = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->tax = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->mc_currency = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->reasoncode = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->custom = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->country = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->datecreation = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 29; // 29 = PaypalPaymentInfoPeer::NUM_COLUMNS - PaypalPaymentInfoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating PaypalPaymentInfo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PaypalPaymentInfoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PaypalPaymentInfoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collPaypalCartInfos = null;
			$this->lastPaypalCartInfoCriteria = null;

			$this->collTransactionss = null;
			$this->lastTransactionsCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PaypalPaymentInfoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePaypalPaymentInfo:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				PaypalPaymentInfoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePaypalPaymentInfo:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PaypalPaymentInfoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePaypalPaymentInfo:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePaypalPaymentInfo:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				PaypalPaymentInfoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PaypalPaymentInfoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += PaypalPaymentInfoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collPaypalCartInfos !== null) {
				foreach ($this->collPaypalCartInfos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTransactionss !== null) {
				foreach ($this->collTransactionss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = PaypalPaymentInfoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collPaypalCartInfos !== null) {
					foreach ($this->collPaypalCartInfos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTransactionss !== null) {
					foreach ($this->collTransactionss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PaypalPaymentInfoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getFirstname();
				break;
			case 1:
				return $this->getLastname();
				break;
			case 2:
				return $this->getBuyerEmail();
				break;
			case 3:
				return $this->getStreet();
				break;
			case 4:
				return $this->getCity();
				break;
			case 5:
				return $this->getState();
				break;
			case 6:
				return $this->getZipcode();
				break;
			case 7:
				return $this->getMemo();
				break;
			case 8:
				return $this->getItemname();
				break;
			case 9:
				return $this->getItemnumber();
				break;
			case 10:
				return $this->getOs0();
				break;
			case 11:
				return $this->getOn0();
				break;
			case 12:
				return $this->getOs1();
				break;
			case 13:
				return $this->getOn1();
				break;
			case 14:
				return $this->getQuantity();
				break;
			case 15:
				return $this->getPaymentdate();
				break;
			case 16:
				return $this->getPaymenttype();
				break;
			case 17:
				return $this->getTxnid();
				break;
			case 18:
				return $this->getMcGross();
				break;
			case 19:
				return $this->getMcFee();
				break;
			case 20:
				return $this->getPaymentstatus();
				break;
			case 21:
				return $this->getPendingreason();
				break;
			case 22:
				return $this->getTxntype();
				break;
			case 23:
				return $this->getTax();
				break;
			case 24:
				return $this->getMcCurrency();
				break;
			case 25:
				return $this->getReasoncode();
				break;
			case 26:
				return $this->getCustom();
				break;
			case 27:
				return $this->getCountry();
				break;
			case 28:
				return $this->getDatecreation();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PaypalPaymentInfoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getFirstname(),
			$keys[1] => $this->getLastname(),
			$keys[2] => $this->getBuyerEmail(),
			$keys[3] => $this->getStreet(),
			$keys[4] => $this->getCity(),
			$keys[5] => $this->getState(),
			$keys[6] => $this->getZipcode(),
			$keys[7] => $this->getMemo(),
			$keys[8] => $this->getItemname(),
			$keys[9] => $this->getItemnumber(),
			$keys[10] => $this->getOs0(),
			$keys[11] => $this->getOn0(),
			$keys[12] => $this->getOs1(),
			$keys[13] => $this->getOn1(),
			$keys[14] => $this->getQuantity(),
			$keys[15] => $this->getPaymentdate(),
			$keys[16] => $this->getPaymenttype(),
			$keys[17] => $this->getTxnid(),
			$keys[18] => $this->getMcGross(),
			$keys[19] => $this->getMcFee(),
			$keys[20] => $this->getPaymentstatus(),
			$keys[21] => $this->getPendingreason(),
			$keys[22] => $this->getTxntype(),
			$keys[23] => $this->getTax(),
			$keys[24] => $this->getMcCurrency(),
			$keys[25] => $this->getReasoncode(),
			$keys[26] => $this->getCustom(),
			$keys[27] => $this->getCountry(),
			$keys[28] => $this->getDatecreation(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PaypalPaymentInfoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setFirstname($value);
				break;
			case 1:
				$this->setLastname($value);
				break;
			case 2:
				$this->setBuyerEmail($value);
				break;
			case 3:
				$this->setStreet($value);
				break;
			case 4:
				$this->setCity($value);
				break;
			case 5:
				$this->setState($value);
				break;
			case 6:
				$this->setZipcode($value);
				break;
			case 7:
				$this->setMemo($value);
				break;
			case 8:
				$this->setItemname($value);
				break;
			case 9:
				$this->setItemnumber($value);
				break;
			case 10:
				$this->setOs0($value);
				break;
			case 11:
				$this->setOn0($value);
				break;
			case 12:
				$this->setOs1($value);
				break;
			case 13:
				$this->setOn1($value);
				break;
			case 14:
				$this->setQuantity($value);
				break;
			case 15:
				$this->setPaymentdate($value);
				break;
			case 16:
				$this->setPaymenttype($value);
				break;
			case 17:
				$this->setTxnid($value);
				break;
			case 18:
				$this->setMcGross($value);
				break;
			case 19:
				$this->setMcFee($value);
				break;
			case 20:
				$this->setPaymentstatus($value);
				break;
			case 21:
				$this->setPendingreason($value);
				break;
			case 22:
				$this->setTxntype($value);
				break;
			case 23:
				$this->setTax($value);
				break;
			case 24:
				$this->setMcCurrency($value);
				break;
			case 25:
				$this->setReasoncode($value);
				break;
			case 26:
				$this->setCustom($value);
				break;
			case 27:
				$this->setCountry($value);
				break;
			case 28:
				$this->setDatecreation($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PaypalPaymentInfoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setFirstname($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setLastname($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setBuyerEmail($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setStreet($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCity($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setState($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setZipcode($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setMemo($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setItemname($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setItemnumber($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setOs0($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setOn0($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setOs1($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setOn1($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setQuantity($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setPaymentdate($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setPaymenttype($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setTxnid($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMcGross($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setMcFee($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setPaymentstatus($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setPendingreason($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setTxntype($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setTax($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setMcCurrency($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setReasoncode($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setCustom($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setCountry($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setDatecreation($arr[$keys[28]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PaypalPaymentInfoPeer::DATABASE_NAME);

		if ($this->isColumnModified(PaypalPaymentInfoPeer::FIRSTNAME)) $criteria->add(PaypalPaymentInfoPeer::FIRSTNAME, $this->firstname);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::LASTNAME)) $criteria->add(PaypalPaymentInfoPeer::LASTNAME, $this->lastname);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::BUYER_EMAIL)) $criteria->add(PaypalPaymentInfoPeer::BUYER_EMAIL, $this->buyer_email);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::STREET)) $criteria->add(PaypalPaymentInfoPeer::STREET, $this->street);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::CITY)) $criteria->add(PaypalPaymentInfoPeer::CITY, $this->city);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::STATE)) $criteria->add(PaypalPaymentInfoPeer::STATE, $this->state);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::ZIPCODE)) $criteria->add(PaypalPaymentInfoPeer::ZIPCODE, $this->zipcode);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::MEMO)) $criteria->add(PaypalPaymentInfoPeer::MEMO, $this->memo);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::ITEMNAME)) $criteria->add(PaypalPaymentInfoPeer::ITEMNAME, $this->itemname);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::ITEMNUMBER)) $criteria->add(PaypalPaymentInfoPeer::ITEMNUMBER, $this->itemnumber);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::OS0)) $criteria->add(PaypalPaymentInfoPeer::OS0, $this->os0);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::ON0)) $criteria->add(PaypalPaymentInfoPeer::ON0, $this->on0);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::OS1)) $criteria->add(PaypalPaymentInfoPeer::OS1, $this->os1);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::ON1)) $criteria->add(PaypalPaymentInfoPeer::ON1, $this->on1);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::QUANTITY)) $criteria->add(PaypalPaymentInfoPeer::QUANTITY, $this->quantity);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::PAYMENTDATE)) $criteria->add(PaypalPaymentInfoPeer::PAYMENTDATE, $this->paymentdate);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::PAYMENTTYPE)) $criteria->add(PaypalPaymentInfoPeer::PAYMENTTYPE, $this->paymenttype);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::TXNID)) $criteria->add(PaypalPaymentInfoPeer::TXNID, $this->txnid);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::MC_GROSS)) $criteria->add(PaypalPaymentInfoPeer::MC_GROSS, $this->mc_gross);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::MC_FEE)) $criteria->add(PaypalPaymentInfoPeer::MC_FEE, $this->mc_fee);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::PAYMENTSTATUS)) $criteria->add(PaypalPaymentInfoPeer::PAYMENTSTATUS, $this->paymentstatus);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::PENDINGREASON)) $criteria->add(PaypalPaymentInfoPeer::PENDINGREASON, $this->pendingreason);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::TXNTYPE)) $criteria->add(PaypalPaymentInfoPeer::TXNTYPE, $this->txntype);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::TAX)) $criteria->add(PaypalPaymentInfoPeer::TAX, $this->tax);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::MC_CURRENCY)) $criteria->add(PaypalPaymentInfoPeer::MC_CURRENCY, $this->mc_currency);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::REASONCODE)) $criteria->add(PaypalPaymentInfoPeer::REASONCODE, $this->reasoncode);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::CUSTOM)) $criteria->add(PaypalPaymentInfoPeer::CUSTOM, $this->custom);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::COUNTRY)) $criteria->add(PaypalPaymentInfoPeer::COUNTRY, $this->country);
		if ($this->isColumnModified(PaypalPaymentInfoPeer::DATECREATION)) $criteria->add(PaypalPaymentInfoPeer::DATECREATION, $this->datecreation);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PaypalPaymentInfoPeer::DATABASE_NAME);

		$criteria->add(PaypalPaymentInfoPeer::TXNID, $this->txnid);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getTxnid();
	}

	/**
	 * Generic method to set the primary key (txnid column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setTxnid($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of PaypalPaymentInfo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFirstname($this->firstname);

		$copyObj->setLastname($this->lastname);

		$copyObj->setBuyerEmail($this->buyer_email);

		$copyObj->setStreet($this->street);

		$copyObj->setCity($this->city);

		$copyObj->setState($this->state);

		$copyObj->setZipcode($this->zipcode);

		$copyObj->setMemo($this->memo);

		$copyObj->setItemname($this->itemname);

		$copyObj->setItemnumber($this->itemnumber);

		$copyObj->setOs0($this->os0);

		$copyObj->setOn0($this->on0);

		$copyObj->setOs1($this->os1);

		$copyObj->setOn1($this->on1);

		$copyObj->setQuantity($this->quantity);

		$copyObj->setPaymentdate($this->paymentdate);

		$copyObj->setPaymenttype($this->paymenttype);

		$copyObj->setTxnid($this->txnid);

		$copyObj->setMcGross($this->mc_gross);

		$copyObj->setMcFee($this->mc_fee);

		$copyObj->setPaymentstatus($this->paymentstatus);

		$copyObj->setPendingreason($this->pendingreason);

		$copyObj->setTxntype($this->txntype);

		$copyObj->setTax($this->tax);

		$copyObj->setMcCurrency($this->mc_currency);

		$copyObj->setReasoncode($this->reasoncode);

		$copyObj->setCustom($this->custom);

		$copyObj->setCountry($this->country);

		$copyObj->setDatecreation($this->datecreation);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getPaypalCartInfos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPaypalCartInfo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTransactionss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTransactions($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     PaypalPaymentInfo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PaypalPaymentInfoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PaypalPaymentInfoPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collPaypalCartInfos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPaypalCartInfos()
	 */
	public function clearPaypalCartInfos()
	{
		$this->collPaypalCartInfos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPaypalCartInfos collection (array).
	 *
	 * By default this just sets the collPaypalCartInfos collection to an empty array (like clearcollPaypalCartInfos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPaypalCartInfos()
	{
		$this->collPaypalCartInfos = array();
	}

	/**
	 * Gets an array of PaypalCartInfo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PaypalPaymentInfo has previously been saved, it will retrieve
	 * related PaypalCartInfos from storage. If this PaypalPaymentInfo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PaypalCartInfo[]
	 * @throws     PropelException
	 */
	public function getPaypalCartInfos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PaypalPaymentInfoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPaypalCartInfos === null) {
			if ($this->isNew()) {
			   $this->collPaypalCartInfos = array();
			} else {

				$criteria->add(PaypalCartInfoPeer::TXNID, $this->txnid);

				PaypalCartInfoPeer::addSelectColumns($criteria);
				$this->collPaypalCartInfos = PaypalCartInfoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PaypalCartInfoPeer::TXNID, $this->txnid);

				PaypalCartInfoPeer::addSelectColumns($criteria);
				if (!isset($this->lastPaypalCartInfoCriteria) || !$this->lastPaypalCartInfoCriteria->equals($criteria)) {
					$this->collPaypalCartInfos = PaypalCartInfoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPaypalCartInfoCriteria = $criteria;
		return $this->collPaypalCartInfos;
	}

	/**
	 * Returns the number of related PaypalCartInfo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PaypalCartInfo objects.
	 * @throws     PropelException
	 */
	public function countPaypalCartInfos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PaypalPaymentInfoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPaypalCartInfos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PaypalCartInfoPeer::TXNID, $this->txnid);

				$count = PaypalCartInfoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PaypalCartInfoPeer::TXNID, $this->txnid);

				if (!isset($this->lastPaypalCartInfoCriteria) || !$this->lastPaypalCartInfoCriteria->equals($criteria)) {
					$count = PaypalCartInfoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPaypalCartInfos);
				}
			} else {
				$count = count($this->collPaypalCartInfos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PaypalCartInfo object to this object
	 * through the PaypalCartInfo foreign key attribute.
	 *
	 * @param      PaypalCartInfo $l PaypalCartInfo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPaypalCartInfo(PaypalCartInfo $l)
	{
		if ($this->collPaypalCartInfos === null) {
			$this->initPaypalCartInfos();
		}
		if (!in_array($l, $this->collPaypalCartInfos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPaypalCartInfos, $l);
			$l->setPaypalPaymentInfo($this);
		}
	}

	/**
	 * Clears out the collTransactionss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTransactionss()
	 */
	public function clearTransactionss()
	{
		$this->collTransactionss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTransactionss collection (array).
	 *
	 * By default this just sets the collTransactionss collection to an empty array (like clearcollTransactionss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTransactionss()
	{
		$this->collTransactionss = array();
	}

	/**
	 * Gets an array of Transactions objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PaypalPaymentInfo has previously been saved, it will retrieve
	 * related Transactionss from storage. If this PaypalPaymentInfo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Transactions[]
	 * @throws     PropelException
	 */
	public function getTransactionss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PaypalPaymentInfoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactionss === null) {
			if ($this->isNew()) {
			   $this->collTransactionss = array();
			} else {

				$criteria->add(TransactionsPeer::TRANSACTIONS_PAYPAL_TXNID, $this->txnid);

				TransactionsPeer::addSelectColumns($criteria);
				$this->collTransactionss = TransactionsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TransactionsPeer::TRANSACTIONS_PAYPAL_TXNID, $this->txnid);

				TransactionsPeer::addSelectColumns($criteria);
				if (!isset($this->lastTransactionsCriteria) || !$this->lastTransactionsCriteria->equals($criteria)) {
					$this->collTransactionss = TransactionsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTransactionsCriteria = $criteria;
		return $this->collTransactionss;
	}

	/**
	 * Returns the number of related Transactions objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Transactions objects.
	 * @throws     PropelException
	 */
	public function countTransactionss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PaypalPaymentInfoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTransactionss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TransactionsPeer::TRANSACTIONS_PAYPAL_TXNID, $this->txnid);

				$count = TransactionsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TransactionsPeer::TRANSACTIONS_PAYPAL_TXNID, $this->txnid);

				if (!isset($this->lastTransactionsCriteria) || !$this->lastTransactionsCriteria->equals($criteria)) {
					$count = TransactionsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTransactionss);
				}
			} else {
				$count = count($this->collTransactionss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Transactions object to this object
	 * through the Transactions foreign key attribute.
	 *
	 * @param      Transactions $l Transactions
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTransactions(Transactions $l)
	{
		if ($this->collTransactionss === null) {
			$this->initTransactionss();
		}
		if (!in_array($l, $this->collTransactionss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTransactionss, $l);
			$l->setPaypalPaymentInfo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PaypalPaymentInfo is new, it will return
	 * an empty collection; or if this PaypalPaymentInfo has previously
	 * been saved, it will retrieve related Transactionss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PaypalPaymentInfo.
	 */
	public function getTransactionssJoinProfiles($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PaypalPaymentInfoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactionss === null) {
			if ($this->isNew()) {
				$this->collTransactionss = array();
			} else {

				$criteria->add(TransactionsPeer::TRANSACTIONS_PAYPAL_TXNID, $this->txnid);

				$this->collTransactionss = TransactionsPeer::doSelectJoinProfiles($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionsPeer::TRANSACTIONS_PAYPAL_TXNID, $this->txnid);

			if (!isset($this->lastTransactionsCriteria) || !$this->lastTransactionsCriteria->equals($criteria)) {
				$this->collTransactionss = TransactionsPeer::doSelectJoinProfiles($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionsCriteria = $criteria;

		return $this->collTransactionss;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collPaypalCartInfos) {
				foreach ((array) $this->collPaypalCartInfos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTransactionss) {
				foreach ((array) $this->collTransactionss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collPaypalCartInfos = null;
		$this->collTransactionss = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasePaypalPaymentInfo:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasePaypalPaymentInfo::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasePaypalPaymentInfo
