<?php

/**
 * Base class that represents a row from the 'paypal_subscription_info' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 03/16/11 08:33:16
 *
 * @package    lib.model.om
 */
abstract class BasePaypalSubscriptionInfo extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PaypalSubscriptionInfoPeer
	 */
	protected static $peer;

	/**
	 * The value for the paypal_subscription_info_id field.
	 * @var        int
	 */
	protected $paypal_subscription_info_id;

	/**
	 * The value for the subscr_id field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $subscr_id;

	/**
	 * The value for the sub_event field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $sub_event;

	/**
	 * The value for the subscr_date field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $subscr_date;

	/**
	 * The value for the subscr_effective field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $subscr_effective;

	/**
	 * The value for the period1 field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $period1;

	/**
	 * The value for the period2 field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $period2;

	/**
	 * The value for the period3 field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $period3;

	/**
	 * The value for the amount1 field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $amount1;

	/**
	 * The value for the amount2 field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $amount2;

	/**
	 * The value for the amount3 field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $amount3;

	/**
	 * The value for the mc_amount1 field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $mc_amount1;

	/**
	 * The value for the mc_amount2 field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $mc_amount2;

	/**
	 * The value for the mc_amount3 field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $mc_amount3;

	/**
	 * The value for the recurring field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $recurring;

	/**
	 * The value for the reattempt field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $reattempt;

	/**
	 * The value for the retry_at field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $retry_at;

	/**
	 * The value for the recur_times field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $recur_times;

	/**
	 * The value for the username field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $username;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the payment_txn_id field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $payment_txn_id;

	/**
	 * The value for the subscriber_emailaddress field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $subscriber_emailaddress;

	/**
	 * The value for the datecreation field.
	 * Note: this column has a database default value of: NULL
	 * @var        string
	 */
	protected $datecreation;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'PaypalSubscriptionInfoPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->subscr_id = '';
		$this->sub_event = '';
		$this->subscr_date = '';
		$this->subscr_effective = '';
		$this->period1 = '';
		$this->period2 = '';
		$this->period3 = '';
		$this->amount1 = '';
		$this->amount2 = '';
		$this->amount3 = '';
		$this->mc_amount1 = '';
		$this->mc_amount2 = '';
		$this->mc_amount3 = '';
		$this->recurring = '';
		$this->reattempt = '';
		$this->retry_at = '';
		$this->recur_times = '';
		$this->username = '';
		$this->payment_txn_id = '';
		$this->subscriber_emailaddress = '';
		$this->datecreation = NULL;
	}

	/**
	 * Initializes internal state of BasePaypalSubscriptionInfo object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [paypal_subscription_info_id] column value.
	 * 
	 * @return     int
	 */
	public function getPaypalSubscriptionInfoId()
	{
		return $this->paypal_subscription_info_id;
	}

	/**
	 * Get the [subscr_id] column value.
	 * 
	 * @return     string
	 */
	public function getSubscrId()
	{
		return $this->subscr_id;
	}

	/**
	 * Get the [sub_event] column value.
	 * 
	 * @return     string
	 */
	public function getSubEvent()
	{
		return $this->sub_event;
	}

	/**
	 * Get the [subscr_date] column value.
	 * 
	 * @return     string
	 */
	public function getSubscrDate()
	{
		return $this->subscr_date;
	}

	/**
	 * Get the [subscr_effective] column value.
	 * 
	 * @return     string
	 */
	public function getSubscrEffective()
	{
		return $this->subscr_effective;
	}

	/**
	 * Get the [period1] column value.
	 * 
	 * @return     string
	 */
	public function getPeriod1()
	{
		return $this->period1;
	}

	/**
	 * Get the [period2] column value.
	 * 
	 * @return     string
	 */
	public function getPeriod2()
	{
		return $this->period2;
	}

	/**
	 * Get the [period3] column value.
	 * 
	 * @return     string
	 */
	public function getPeriod3()
	{
		return $this->period3;
	}

	/**
	 * Get the [amount1] column value.
	 * 
	 * @return     string
	 */
	public function getAmount1()
	{
		return $this->amount1;
	}

	/**
	 * Get the [amount2] column value.
	 * 
	 * @return     string
	 */
	public function getAmount2()
	{
		return $this->amount2;
	}

	/**
	 * Get the [amount3] column value.
	 * 
	 * @return     string
	 */
	public function getAmount3()
	{
		return $this->amount3;
	}

	/**
	 * Get the [mc_amount1] column value.
	 * 
	 * @return     string
	 */
	public function getMcAmount1()
	{
		return $this->mc_amount1;
	}

	/**
	 * Get the [mc_amount2] column value.
	 * 
	 * @return     string
	 */
	public function getMcAmount2()
	{
		return $this->mc_amount2;
	}

	/**
	 * Get the [mc_amount3] column value.
	 * 
	 * @return     string
	 */
	public function getMcAmount3()
	{
		return $this->mc_amount3;
	}

	/**
	 * Get the [recurring] column value.
	 * 
	 * @return     string
	 */
	public function getRecurring()
	{
		return $this->recurring;
	}

	/**
	 * Get the [reattempt] column value.
	 * 
	 * @return     string
	 */
	public function getReattempt()
	{
		return $this->reattempt;
	}

	/**
	 * Get the [retry_at] column value.
	 * 
	 * @return     string
	 */
	public function getRetryAt()
	{
		return $this->retry_at;
	}

	/**
	 * Get the [recur_times] column value.
	 * 
	 * @return     string
	 */
	public function getRecurTimes()
	{
		return $this->recur_times;
	}

	/**
	 * Get the [username] column value.
	 * 
	 * @return     string
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [payment_txn_id] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentTxnId()
	{
		return $this->payment_txn_id;
	}

	/**
	 * Get the [subscriber_emailaddress] column value.
	 * 
	 * @return     string
	 */
	public function getSubscriberEmailaddress()
	{
		return $this->subscriber_emailaddress;
	}

	/**
	 * Get the [optionally formatted] temporal [datecreation] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatecreation($format = 'Y-m-d')
	{
		if ($this->datecreation === null) {
			return null;
		}


		if ($this->datecreation === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datecreation);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datecreation, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [paypal_subscription_info_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setPaypalSubscriptionInfoId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->paypal_subscription_info_id !== $v) {
			$this->paypal_subscription_info_id = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::PAYPAL_SUBSCRIPTION_INFO_ID;
		}

		return $this;
	} // setPaypalSubscriptionInfoId()

	/**
	 * Set the value of [subscr_id] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setSubscrId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subscr_id !== $v || $this->isNew()) {
			$this->subscr_id = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::SUBSCR_ID;
		}

		return $this;
	} // setSubscrId()

	/**
	 * Set the value of [sub_event] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setSubEvent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sub_event !== $v || $this->isNew()) {
			$this->sub_event = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::SUB_EVENT;
		}

		return $this;
	} // setSubEvent()

	/**
	 * Set the value of [subscr_date] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setSubscrDate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subscr_date !== $v || $this->isNew()) {
			$this->subscr_date = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::SUBSCR_DATE;
		}

		return $this;
	} // setSubscrDate()

	/**
	 * Set the value of [subscr_effective] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setSubscrEffective($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subscr_effective !== $v || $this->isNew()) {
			$this->subscr_effective = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::SUBSCR_EFFECTIVE;
		}

		return $this;
	} // setSubscrEffective()

	/**
	 * Set the value of [period1] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setPeriod1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->period1 !== $v || $this->isNew()) {
			$this->period1 = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::PERIOD1;
		}

		return $this;
	} // setPeriod1()

	/**
	 * Set the value of [period2] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setPeriod2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->period2 !== $v || $this->isNew()) {
			$this->period2 = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::PERIOD2;
		}

		return $this;
	} // setPeriod2()

	/**
	 * Set the value of [period3] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setPeriod3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->period3 !== $v || $this->isNew()) {
			$this->period3 = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::PERIOD3;
		}

		return $this;
	} // setPeriod3()

	/**
	 * Set the value of [amount1] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setAmount1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->amount1 !== $v || $this->isNew()) {
			$this->amount1 = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::AMOUNT1;
		}

		return $this;
	} // setAmount1()

	/**
	 * Set the value of [amount2] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setAmount2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->amount2 !== $v || $this->isNew()) {
			$this->amount2 = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::AMOUNT2;
		}

		return $this;
	} // setAmount2()

	/**
	 * Set the value of [amount3] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setAmount3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->amount3 !== $v || $this->isNew()) {
			$this->amount3 = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::AMOUNT3;
		}

		return $this;
	} // setAmount3()

	/**
	 * Set the value of [mc_amount1] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setMcAmount1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mc_amount1 !== $v || $this->isNew()) {
			$this->mc_amount1 = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::MC_AMOUNT1;
		}

		return $this;
	} // setMcAmount1()

	/**
	 * Set the value of [mc_amount2] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setMcAmount2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mc_amount2 !== $v || $this->isNew()) {
			$this->mc_amount2 = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::MC_AMOUNT2;
		}

		return $this;
	} // setMcAmount2()

	/**
	 * Set the value of [mc_amount3] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setMcAmount3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mc_amount3 !== $v || $this->isNew()) {
			$this->mc_amount3 = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::MC_AMOUNT3;
		}

		return $this;
	} // setMcAmount3()

	/**
	 * Set the value of [recurring] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setRecurring($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->recurring !== $v || $this->isNew()) {
			$this->recurring = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::RECURRING;
		}

		return $this;
	} // setRecurring()

	/**
	 * Set the value of [reattempt] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setReattempt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reattempt !== $v || $this->isNew()) {
			$this->reattempt = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::REATTEMPT;
		}

		return $this;
	} // setReattempt()

	/**
	 * Set the value of [retry_at] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setRetryAt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->retry_at !== $v || $this->isNew()) {
			$this->retry_at = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::RETRY_AT;
		}

		return $this;
	} // setRetryAt()

	/**
	 * Set the value of [recur_times] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setRecurTimes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->recur_times !== $v || $this->isNew()) {
			$this->recur_times = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::RECUR_TIMES;
		}

		return $this;
	} // setRecurTimes()

	/**
	 * Set the value of [username] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->username !== $v || $this->isNew()) {
			$this->username = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::USERNAME;
		}

		return $this;
	} // setUsername()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [payment_txn_id] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setPaymentTxnId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_txn_id !== $v || $this->isNew()) {
			$this->payment_txn_id = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::PAYMENT_TXN_ID;
		}

		return $this;
	} // setPaymentTxnId()

	/**
	 * Set the value of [subscriber_emailaddress] column.
	 * 
	 * @param      string $v new value
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setSubscriberEmailaddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subscriber_emailaddress !== $v || $this->isNew()) {
			$this->subscriber_emailaddress = $v;
			$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::SUBSCRIBER_EMAILADDRESS;
		}

		return $this;
	} // setSubscriberEmailaddress()

	/**
	 * Sets the value of [datecreation] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PaypalSubscriptionInfo The current object (for fluent API support)
	 */
	public function setDatecreation($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datecreation !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datecreation !== null && $tmpDt = new DateTime($this->datecreation)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					|| ($dt->format('Y-m-d') === NULL) // or the entered value matches the default
					)
			{
				$this->datecreation = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::DATECREATION;
			}
		} // if either are not null

		return $this;
	} // setDatecreation()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->subscr_id !== '') {
				return false;
			}

			if ($this->sub_event !== '') {
				return false;
			}

			if ($this->subscr_date !== '') {
				return false;
			}

			if ($this->subscr_effective !== '') {
				return false;
			}

			if ($this->period1 !== '') {
				return false;
			}

			if ($this->period2 !== '') {
				return false;
			}

			if ($this->period3 !== '') {
				return false;
			}

			if ($this->amount1 !== '') {
				return false;
			}

			if ($this->amount2 !== '') {
				return false;
			}

			if ($this->amount3 !== '') {
				return false;
			}

			if ($this->mc_amount1 !== '') {
				return false;
			}

			if ($this->mc_amount2 !== '') {
				return false;
			}

			if ($this->mc_amount3 !== '') {
				return false;
			}

			if ($this->recurring !== '') {
				return false;
			}

			if ($this->reattempt !== '') {
				return false;
			}

			if ($this->retry_at !== '') {
				return false;
			}

			if ($this->recur_times !== '') {
				return false;
			}

			if ($this->username !== '') {
				return false;
			}

			if ($this->payment_txn_id !== '') {
				return false;
			}

			if ($this->subscriber_emailaddress !== '') {
				return false;
			}

			if ($this->datecreation !== NULL) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->paypal_subscription_info_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->subscr_id = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->sub_event = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->subscr_date = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->subscr_effective = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->period1 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->period2 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->period3 = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->amount1 = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->amount2 = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->amount3 = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->mc_amount1 = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->mc_amount2 = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->mc_amount3 = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->recurring = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->reattempt = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->retry_at = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->recur_times = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->username = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->password = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->payment_txn_id = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->subscriber_emailaddress = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->datecreation = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 23; // 23 = PaypalSubscriptionInfoPeer::NUM_COLUMNS - PaypalSubscriptionInfoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating PaypalSubscriptionInfo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PaypalSubscriptionInfoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PaypalSubscriptionInfoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PaypalSubscriptionInfoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePaypalSubscriptionInfo:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				PaypalSubscriptionInfoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePaypalSubscriptionInfo:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PaypalSubscriptionInfoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePaypalSubscriptionInfo:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePaypalSubscriptionInfo:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				PaypalSubscriptionInfoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PaypalSubscriptionInfoPeer::PAYPAL_SUBSCRIPTION_INFO_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PaypalSubscriptionInfoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setPaypalSubscriptionInfoId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PaypalSubscriptionInfoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = PaypalSubscriptionInfoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PaypalSubscriptionInfoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getPaypalSubscriptionInfoId();
				break;
			case 1:
				return $this->getSubscrId();
				break;
			case 2:
				return $this->getSubEvent();
				break;
			case 3:
				return $this->getSubscrDate();
				break;
			case 4:
				return $this->getSubscrEffective();
				break;
			case 5:
				return $this->getPeriod1();
				break;
			case 6:
				return $this->getPeriod2();
				break;
			case 7:
				return $this->getPeriod3();
				break;
			case 8:
				return $this->getAmount1();
				break;
			case 9:
				return $this->getAmount2();
				break;
			case 10:
				return $this->getAmount3();
				break;
			case 11:
				return $this->getMcAmount1();
				break;
			case 12:
				return $this->getMcAmount2();
				break;
			case 13:
				return $this->getMcAmount3();
				break;
			case 14:
				return $this->getRecurring();
				break;
			case 15:
				return $this->getReattempt();
				break;
			case 16:
				return $this->getRetryAt();
				break;
			case 17:
				return $this->getRecurTimes();
				break;
			case 18:
				return $this->getUsername();
				break;
			case 19:
				return $this->getPassword();
				break;
			case 20:
				return $this->getPaymentTxnId();
				break;
			case 21:
				return $this->getSubscriberEmailaddress();
				break;
			case 22:
				return $this->getDatecreation();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PaypalSubscriptionInfoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getPaypalSubscriptionInfoId(),
			$keys[1] => $this->getSubscrId(),
			$keys[2] => $this->getSubEvent(),
			$keys[3] => $this->getSubscrDate(),
			$keys[4] => $this->getSubscrEffective(),
			$keys[5] => $this->getPeriod1(),
			$keys[6] => $this->getPeriod2(),
			$keys[7] => $this->getPeriod3(),
			$keys[8] => $this->getAmount1(),
			$keys[9] => $this->getAmount2(),
			$keys[10] => $this->getAmount3(),
			$keys[11] => $this->getMcAmount1(),
			$keys[12] => $this->getMcAmount2(),
			$keys[13] => $this->getMcAmount3(),
			$keys[14] => $this->getRecurring(),
			$keys[15] => $this->getReattempt(),
			$keys[16] => $this->getRetryAt(),
			$keys[17] => $this->getRecurTimes(),
			$keys[18] => $this->getUsername(),
			$keys[19] => $this->getPassword(),
			$keys[20] => $this->getPaymentTxnId(),
			$keys[21] => $this->getSubscriberEmailaddress(),
			$keys[22] => $this->getDatecreation(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PaypalSubscriptionInfoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setPaypalSubscriptionInfoId($value);
				break;
			case 1:
				$this->setSubscrId($value);
				break;
			case 2:
				$this->setSubEvent($value);
				break;
			case 3:
				$this->setSubscrDate($value);
				break;
			case 4:
				$this->setSubscrEffective($value);
				break;
			case 5:
				$this->setPeriod1($value);
				break;
			case 6:
				$this->setPeriod2($value);
				break;
			case 7:
				$this->setPeriod3($value);
				break;
			case 8:
				$this->setAmount1($value);
				break;
			case 9:
				$this->setAmount2($value);
				break;
			case 10:
				$this->setAmount3($value);
				break;
			case 11:
				$this->setMcAmount1($value);
				break;
			case 12:
				$this->setMcAmount2($value);
				break;
			case 13:
				$this->setMcAmount3($value);
				break;
			case 14:
				$this->setRecurring($value);
				break;
			case 15:
				$this->setReattempt($value);
				break;
			case 16:
				$this->setRetryAt($value);
				break;
			case 17:
				$this->setRecurTimes($value);
				break;
			case 18:
				$this->setUsername($value);
				break;
			case 19:
				$this->setPassword($value);
				break;
			case 20:
				$this->setPaymentTxnId($value);
				break;
			case 21:
				$this->setSubscriberEmailaddress($value);
				break;
			case 22:
				$this->setDatecreation($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PaypalSubscriptionInfoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setPaypalSubscriptionInfoId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setSubscrId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setSubEvent($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSubscrDate($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setSubscrEffective($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPeriod1($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPeriod2($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPeriod3($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAmount1($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setAmount2($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setAmount3($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setMcAmount1($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setMcAmount2($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setMcAmount3($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setRecurring($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setReattempt($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setRetryAt($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setRecurTimes($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setUsername($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setPassword($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setPaymentTxnId($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setSubscriberEmailaddress($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setDatecreation($arr[$keys[22]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PaypalSubscriptionInfoPeer::DATABASE_NAME);

		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::PAYPAL_SUBSCRIPTION_INFO_ID)) $criteria->add(PaypalSubscriptionInfoPeer::PAYPAL_SUBSCRIPTION_INFO_ID, $this->paypal_subscription_info_id);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::SUBSCR_ID)) $criteria->add(PaypalSubscriptionInfoPeer::SUBSCR_ID, $this->subscr_id);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::SUB_EVENT)) $criteria->add(PaypalSubscriptionInfoPeer::SUB_EVENT, $this->sub_event);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::SUBSCR_DATE)) $criteria->add(PaypalSubscriptionInfoPeer::SUBSCR_DATE, $this->subscr_date);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::SUBSCR_EFFECTIVE)) $criteria->add(PaypalSubscriptionInfoPeer::SUBSCR_EFFECTIVE, $this->subscr_effective);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::PERIOD1)) $criteria->add(PaypalSubscriptionInfoPeer::PERIOD1, $this->period1);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::PERIOD2)) $criteria->add(PaypalSubscriptionInfoPeer::PERIOD2, $this->period2);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::PERIOD3)) $criteria->add(PaypalSubscriptionInfoPeer::PERIOD3, $this->period3);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::AMOUNT1)) $criteria->add(PaypalSubscriptionInfoPeer::AMOUNT1, $this->amount1);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::AMOUNT2)) $criteria->add(PaypalSubscriptionInfoPeer::AMOUNT2, $this->amount2);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::AMOUNT3)) $criteria->add(PaypalSubscriptionInfoPeer::AMOUNT3, $this->amount3);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::MC_AMOUNT1)) $criteria->add(PaypalSubscriptionInfoPeer::MC_AMOUNT1, $this->mc_amount1);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::MC_AMOUNT2)) $criteria->add(PaypalSubscriptionInfoPeer::MC_AMOUNT2, $this->mc_amount2);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::MC_AMOUNT3)) $criteria->add(PaypalSubscriptionInfoPeer::MC_AMOUNT3, $this->mc_amount3);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::RECURRING)) $criteria->add(PaypalSubscriptionInfoPeer::RECURRING, $this->recurring);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::REATTEMPT)) $criteria->add(PaypalSubscriptionInfoPeer::REATTEMPT, $this->reattempt);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::RETRY_AT)) $criteria->add(PaypalSubscriptionInfoPeer::RETRY_AT, $this->retry_at);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::RECUR_TIMES)) $criteria->add(PaypalSubscriptionInfoPeer::RECUR_TIMES, $this->recur_times);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::USERNAME)) $criteria->add(PaypalSubscriptionInfoPeer::USERNAME, $this->username);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::PASSWORD)) $criteria->add(PaypalSubscriptionInfoPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::PAYMENT_TXN_ID)) $criteria->add(PaypalSubscriptionInfoPeer::PAYMENT_TXN_ID, $this->payment_txn_id);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::SUBSCRIBER_EMAILADDRESS)) $criteria->add(PaypalSubscriptionInfoPeer::SUBSCRIBER_EMAILADDRESS, $this->subscriber_emailaddress);
		if ($this->isColumnModified(PaypalSubscriptionInfoPeer::DATECREATION)) $criteria->add(PaypalSubscriptionInfoPeer::DATECREATION, $this->datecreation);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PaypalSubscriptionInfoPeer::DATABASE_NAME);

		$criteria->add(PaypalSubscriptionInfoPeer::PAYPAL_SUBSCRIPTION_INFO_ID, $this->paypal_subscription_info_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getPaypalSubscriptionInfoId();
	}

	/**
	 * Generic method to set the primary key (paypal_subscription_info_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setPaypalSubscriptionInfoId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of PaypalSubscriptionInfo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setSubscrId($this->subscr_id);

		$copyObj->setSubEvent($this->sub_event);

		$copyObj->setSubscrDate($this->subscr_date);

		$copyObj->setSubscrEffective($this->subscr_effective);

		$copyObj->setPeriod1($this->period1);

		$copyObj->setPeriod2($this->period2);

		$copyObj->setPeriod3($this->period3);

		$copyObj->setAmount1($this->amount1);

		$copyObj->setAmount2($this->amount2);

		$copyObj->setAmount3($this->amount3);

		$copyObj->setMcAmount1($this->mc_amount1);

		$copyObj->setMcAmount2($this->mc_amount2);

		$copyObj->setMcAmount3($this->mc_amount3);

		$copyObj->setRecurring($this->recurring);

		$copyObj->setReattempt($this->reattempt);

		$copyObj->setRetryAt($this->retry_at);

		$copyObj->setRecurTimes($this->recur_times);

		$copyObj->setUsername($this->username);

		$copyObj->setPassword($this->password);

		$copyObj->setPaymentTxnId($this->payment_txn_id);

		$copyObj->setSubscriberEmailaddress($this->subscriber_emailaddress);

		$copyObj->setDatecreation($this->datecreation);


		$copyObj->setNew(true);

		$copyObj->setPaypalSubscriptionInfoId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     PaypalSubscriptionInfo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PaypalSubscriptionInfoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PaypalSubscriptionInfoPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasePaypalSubscriptionInfo:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasePaypalSubscriptionInfo::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasePaypalSubscriptionInfo
