<?php

/**
 * Base class that represents a row from the 'tracks' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 03/14/11 14:46:10
 *
 * @package    lib.model.om
 */
abstract class BaseTracks extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TracksPeer
	 */
	protected static $peer;

	/**
	 * The value for the tracks_id field.
	 * @var        int
	 */
	protected $tracks_id;

	/**
	 * The value for the tracks_title field.
	 * @var        string
	 */
	protected $tracks_title;

	/**
	 * The value for the tracks_artist field.
	 * @var        string
	 */
	protected $tracks_artist;

	/**
	 * The value for the profiles_id field.
	 * @var        int
	 */
	protected $profiles_id;

	/**
	 * The value for the tracks_path field.
	 * @var        string
	 */
	protected $tracks_path;

	/**
	 * The value for the tracks_time field.
	 * @var        int
	 */
	protected $tracks_time;

	/**
	 * The value for the tracks_accepted field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $tracks_accepted;

	/**
	 * The value for the tracks_date field.
	 * @var        string
	 */
	protected $tracks_date;

	/**
	 * The value for the tracks_deleted field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $tracks_deleted;

	/**
	 * @var        Profiles
	 */
	protected $aProfiles;

	/**
	 * @var        array ProfilesBaskets[] Collection to store aggregation of ProfilesBaskets objects.
	 */
	protected $collProfilesBasketss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilesBasketss.
	 */
	private $lastProfilesBasketsCriteria = null;

	/**
	 * @var        array ProfilesWishlists[] Collection to store aggregation of ProfilesWishlists objects.
	 */
	protected $collProfilesWishlistss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilesWishlistss.
	 */
	private $lastProfilesWishlistsCriteria = null;

	/**
	 * @var        array TracksGenres[] Collection to store aggregation of TracksGenres objects.
	 */
	protected $collTracksGenress;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTracksGenress.
	 */
	private $lastTracksGenresCriteria = null;

	/**
	 * @var        array TracksPlayed[] Collection to store aggregation of TracksPlayed objects.
	 */
	protected $collTracksPlayeds;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTracksPlayeds.
	 */
	private $lastTracksPlayedCriteria = null;

	/**
	 * @var        array TracksRecommends[] Collection to store aggregation of TracksRecommends objects.
	 */
	protected $collTracksRecommendss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTracksRecommendss.
	 */
	private $lastTracksRecommendsCriteria = null;

	/**
	 * @var        array TransactionsTracks[] Collection to store aggregation of TransactionsTracks objects.
	 */
	protected $collTransactionsTrackss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTransactionsTrackss.
	 */
	private $lastTransactionsTracksCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TracksPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->tracks_accepted = 0;
		$this->tracks_deleted = 0;
	}

	/**
	 * Initializes internal state of BaseTracks object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [tracks_id] column value.
	 * 
	 * @return     int
	 */
	public function getTracksId()
	{
		return $this->tracks_id;
	}

	/**
	 * Get the [tracks_title] column value.
	 * 
	 * @return     string
	 */
	public function getTracksTitle()
	{
		return $this->tracks_title;
	}

	/**
	 * Get the [tracks_artist] column value.
	 * 
	 * @return     string
	 */
	public function getTracksArtist()
	{
		return $this->tracks_artist;
	}

	/**
	 * Get the [profiles_id] column value.
	 * 
	 * @return     int
	 */
	public function getProfilesId()
	{
		return $this->profiles_id;
	}

	/**
	 * Get the [tracks_path] column value.
	 * 
	 * @return     string
	 */
	public function getTracksPath()
	{
		return $this->tracks_path;
	}

	/**
	 * Get the [tracks_time] column value.
	 * 
	 * @return     int
	 */
	public function getTracksTime()
	{
		return $this->tracks_time;
	}

	/**
	 * Get the [tracks_accepted] column value.
	 * 
	 * @return     int
	 */
	public function getTracksAccepted()
	{
		return $this->tracks_accepted;
	}

	/**
	 * Get the [optionally formatted] temporal [tracks_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getTracksDate($format = 'Y-m-d H:i:s')
	{
		if ($this->tracks_date === null) {
			return null;
		}


		if ($this->tracks_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->tracks_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->tracks_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [tracks_deleted] column value.
	 * 
	 * @return     int
	 */
	public function getTracksDeleted()
	{
		return $this->tracks_deleted;
	}

	/**
	 * Set the value of [tracks_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Tracks The current object (for fluent API support)
	 */
	public function setTracksId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tracks_id !== $v) {
			$this->tracks_id = $v;
			$this->modifiedColumns[] = TracksPeer::TRACKS_ID;
		}

		return $this;
	} // setTracksId()

	/**
	 * Set the value of [tracks_title] column.
	 * 
	 * @param      string $v new value
	 * @return     Tracks The current object (for fluent API support)
	 */
	public function setTracksTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tracks_title !== $v) {
			$this->tracks_title = $v;
			$this->modifiedColumns[] = TracksPeer::TRACKS_TITLE;
		}

		return $this;
	} // setTracksTitle()

	/**
	 * Set the value of [tracks_artist] column.
	 * 
	 * @param      string $v new value
	 * @return     Tracks The current object (for fluent API support)
	 */
	public function setTracksArtist($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tracks_artist !== $v) {
			$this->tracks_artist = $v;
			$this->modifiedColumns[] = TracksPeer::TRACKS_ARTIST;
		}

		return $this;
	} // setTracksArtist()

	/**
	 * Set the value of [profiles_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Tracks The current object (for fluent API support)
	 */
	public function setProfilesId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profiles_id !== $v) {
			$this->profiles_id = $v;
			$this->modifiedColumns[] = TracksPeer::PROFILES_ID;
		}

		if ($this->aProfiles !== null && $this->aProfiles->getProfilesId() !== $v) {
			$this->aProfiles = null;
		}

		return $this;
	} // setProfilesId()

	/**
	 * Set the value of [tracks_path] column.
	 * 
	 * @param      string $v new value
	 * @return     Tracks The current object (for fluent API support)
	 */
	public function setTracksPath($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tracks_path !== $v) {
			$this->tracks_path = $v;
			$this->modifiedColumns[] = TracksPeer::TRACKS_PATH;
		}

		return $this;
	} // setTracksPath()

	/**
	 * Set the value of [tracks_time] column.
	 * 
	 * @param      int $v new value
	 * @return     Tracks The current object (for fluent API support)
	 */
	public function setTracksTime($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tracks_time !== $v) {
			$this->tracks_time = $v;
			$this->modifiedColumns[] = TracksPeer::TRACKS_TIME;
		}

		return $this;
	} // setTracksTime()

	/**
	 * Set the value of [tracks_accepted] column.
	 * 
	 * @param      int $v new value
	 * @return     Tracks The current object (for fluent API support)
	 */
	public function setTracksAccepted($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tracks_accepted !== $v || $this->isNew()) {
			$this->tracks_accepted = $v;
			$this->modifiedColumns[] = TracksPeer::TRACKS_ACCEPTED;
		}

		return $this;
	} // setTracksAccepted()

	/**
	 * Sets the value of [tracks_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tracks The current object (for fluent API support)
	 */
	public function setTracksDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->tracks_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->tracks_date !== null && $tmpDt = new DateTime($this->tracks_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->tracks_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = TracksPeer::TRACKS_DATE;
			}
		} // if either are not null

		return $this;
	} // setTracksDate()

	/**
	 * Set the value of [tracks_deleted] column.
	 * 
	 * @param      int $v new value
	 * @return     Tracks The current object (for fluent API support)
	 */
	public function setTracksDeleted($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tracks_deleted !== $v || $this->isNew()) {
			$this->tracks_deleted = $v;
			$this->modifiedColumns[] = TracksPeer::TRACKS_DELETED;
		}

		return $this;
	} // setTracksDeleted()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->tracks_accepted !== 0) {
				return false;
			}

			if ($this->tracks_deleted !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->tracks_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->tracks_title = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->tracks_artist = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->profiles_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->tracks_path = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->tracks_time = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->tracks_accepted = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->tracks_date = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->tracks_deleted = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 9; // 9 = TracksPeer::NUM_COLUMNS - TracksPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tracks object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aProfiles !== null && $this->profiles_id !== $this->aProfiles->getProfilesId()) {
			$this->aProfiles = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TracksPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TracksPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aProfiles = null;
			$this->collProfilesBasketss = null;
			$this->lastProfilesBasketsCriteria = null;

			$this->collProfilesWishlistss = null;
			$this->lastProfilesWishlistsCriteria = null;

			$this->collTracksGenress = null;
			$this->lastTracksGenresCriteria = null;

			$this->collTracksPlayeds = null;
			$this->lastTracksPlayedCriteria = null;

			$this->collTracksRecommendss = null;
			$this->lastTracksRecommendsCriteria = null;

			$this->collTransactionsTrackss = null;
			$this->lastTransactionsTracksCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TracksPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTracks:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				TracksPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTracks:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TracksPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTracks:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTracks:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				TracksPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProfiles !== null) {
				if ($this->aProfiles->isModified() || $this->aProfiles->isNew()) {
					$affectedRows += $this->aProfiles->save($con);
				}
				$this->setProfiles($this->aProfiles);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TracksPeer::TRACKS_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TracksPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setTracksId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += TracksPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collProfilesBasketss !== null) {
				foreach ($this->collProfilesBasketss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilesWishlistss !== null) {
				foreach ($this->collProfilesWishlistss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTracksGenress !== null) {
				foreach ($this->collTracksGenress as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTracksPlayeds !== null) {
				foreach ($this->collTracksPlayeds as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTracksRecommendss !== null) {
				foreach ($this->collTracksRecommendss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTransactionsTrackss !== null) {
				foreach ($this->collTransactionsTrackss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProfiles !== null) {
				if (!$this->aProfiles->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProfiles->getValidationFailures());
				}
			}


			if (($retval = TracksPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collProfilesBasketss !== null) {
					foreach ($this->collProfilesBasketss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilesWishlistss !== null) {
					foreach ($this->collProfilesWishlistss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTracksGenress !== null) {
					foreach ($this->collTracksGenress as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTracksPlayeds !== null) {
					foreach ($this->collTracksPlayeds as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTracksRecommendss !== null) {
					foreach ($this->collTracksRecommendss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTransactionsTrackss !== null) {
					foreach ($this->collTransactionsTrackss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TracksPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getTracksId();
				break;
			case 1:
				return $this->getTracksTitle();
				break;
			case 2:
				return $this->getTracksArtist();
				break;
			case 3:
				return $this->getProfilesId();
				break;
			case 4:
				return $this->getTracksPath();
				break;
			case 5:
				return $this->getTracksTime();
				break;
			case 6:
				return $this->getTracksAccepted();
				break;
			case 7:
				return $this->getTracksDate();
				break;
			case 8:
				return $this->getTracksDeleted();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TracksPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getTracksId(),
			$keys[1] => $this->getTracksTitle(),
			$keys[2] => $this->getTracksArtist(),
			$keys[3] => $this->getProfilesId(),
			$keys[4] => $this->getTracksPath(),
			$keys[5] => $this->getTracksTime(),
			$keys[6] => $this->getTracksAccepted(),
			$keys[7] => $this->getTracksDate(),
			$keys[8] => $this->getTracksDeleted(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TracksPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setTracksId($value);
				break;
			case 1:
				$this->setTracksTitle($value);
				break;
			case 2:
				$this->setTracksArtist($value);
				break;
			case 3:
				$this->setProfilesId($value);
				break;
			case 4:
				$this->setTracksPath($value);
				break;
			case 5:
				$this->setTracksTime($value);
				break;
			case 6:
				$this->setTracksAccepted($value);
				break;
			case 7:
				$this->setTracksDate($value);
				break;
			case 8:
				$this->setTracksDeleted($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TracksPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setTracksId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTracksTitle($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setTracksArtist($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setProfilesId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setTracksPath($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTracksTime($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTracksAccepted($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setTracksDate($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setTracksDeleted($arr[$keys[8]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TracksPeer::DATABASE_NAME);

		if ($this->isColumnModified(TracksPeer::TRACKS_ID)) $criteria->add(TracksPeer::TRACKS_ID, $this->tracks_id);
		if ($this->isColumnModified(TracksPeer::TRACKS_TITLE)) $criteria->add(TracksPeer::TRACKS_TITLE, $this->tracks_title);
		if ($this->isColumnModified(TracksPeer::TRACKS_ARTIST)) $criteria->add(TracksPeer::TRACKS_ARTIST, $this->tracks_artist);
		if ($this->isColumnModified(TracksPeer::PROFILES_ID)) $criteria->add(TracksPeer::PROFILES_ID, $this->profiles_id);
		if ($this->isColumnModified(TracksPeer::TRACKS_PATH)) $criteria->add(TracksPeer::TRACKS_PATH, $this->tracks_path);
		if ($this->isColumnModified(TracksPeer::TRACKS_TIME)) $criteria->add(TracksPeer::TRACKS_TIME, $this->tracks_time);
		if ($this->isColumnModified(TracksPeer::TRACKS_ACCEPTED)) $criteria->add(TracksPeer::TRACKS_ACCEPTED, $this->tracks_accepted);
		if ($this->isColumnModified(TracksPeer::TRACKS_DATE)) $criteria->add(TracksPeer::TRACKS_DATE, $this->tracks_date);
		if ($this->isColumnModified(TracksPeer::TRACKS_DELETED)) $criteria->add(TracksPeer::TRACKS_DELETED, $this->tracks_deleted);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TracksPeer::DATABASE_NAME);

		$criteria->add(TracksPeer::TRACKS_ID, $this->tracks_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getTracksId();
	}

	/**
	 * Generic method to set the primary key (tracks_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setTracksId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tracks (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTracksTitle($this->tracks_title);

		$copyObj->setTracksArtist($this->tracks_artist);

		$copyObj->setProfilesId($this->profiles_id);

		$copyObj->setTracksPath($this->tracks_path);

		$copyObj->setTracksTime($this->tracks_time);

		$copyObj->setTracksAccepted($this->tracks_accepted);

		$copyObj->setTracksDate($this->tracks_date);

		$copyObj->setTracksDeleted($this->tracks_deleted);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getProfilesBasketss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfilesBaskets($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilesWishlistss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfilesWishlists($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTracksGenress() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTracksGenres($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTracksPlayeds() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTracksPlayed($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTracksRecommendss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTracksRecommends($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTransactionsTrackss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTransactionsTracks($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setTracksId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tracks Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TracksPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TracksPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Profiles object.
	 *
	 * @param      Profiles $v
	 * @return     Tracks The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProfiles(Profiles $v = null)
	{
		if ($v === null) {
			$this->setProfilesId(NULL);
		} else {
			$this->setProfilesId($v->getProfilesId());
		}

		$this->aProfiles = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Profiles object, it will not be re-added.
		if ($v !== null) {
			$v->addTracks($this);
		}

		return $this;
	}


	/**
	 * Get the associated Profiles object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Profiles The associated Profiles object.
	 * @throws     PropelException
	 */
	public function getProfiles(PropelPDO $con = null)
	{
		if ($this->aProfiles === null && ($this->profiles_id !== null)) {
			$this->aProfiles = ProfilesPeer::retrieveByPk($this->profiles_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProfiles->addTrackss($this);
			 */
		}
		return $this->aProfiles;
	}

	/**
	 * Clears out the collProfilesBasketss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilesBasketss()
	 */
	public function clearProfilesBasketss()
	{
		$this->collProfilesBasketss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilesBasketss collection (array).
	 *
	 * By default this just sets the collProfilesBasketss collection to an empty array (like clearcollProfilesBasketss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilesBasketss()
	{
		$this->collProfilesBasketss = array();
	}

	/**
	 * Gets an array of ProfilesBaskets objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tracks has previously been saved, it will retrieve
	 * related ProfilesBasketss from storage. If this Tracks is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProfilesBaskets[]
	 * @throws     PropelException
	 */
	public function getProfilesBasketss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesBasketss === null) {
			if ($this->isNew()) {
			   $this->collProfilesBasketss = array();
			} else {

				$criteria->add(ProfilesBasketsPeer::TRACKS_ID, $this->tracks_id);

				ProfilesBasketsPeer::addSelectColumns($criteria);
				$this->collProfilesBasketss = ProfilesBasketsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilesBasketsPeer::TRACKS_ID, $this->tracks_id);

				ProfilesBasketsPeer::addSelectColumns($criteria);
				if (!isset($this->lastProfilesBasketsCriteria) || !$this->lastProfilesBasketsCriteria->equals($criteria)) {
					$this->collProfilesBasketss = ProfilesBasketsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfilesBasketsCriteria = $criteria;
		return $this->collProfilesBasketss;
	}

	/**
	 * Returns the number of related ProfilesBaskets objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProfilesBaskets objects.
	 * @throws     PropelException
	 */
	public function countProfilesBasketss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilesBasketss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilesBasketsPeer::TRACKS_ID, $this->tracks_id);

				$count = ProfilesBasketsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilesBasketsPeer::TRACKS_ID, $this->tracks_id);

				if (!isset($this->lastProfilesBasketsCriteria) || !$this->lastProfilesBasketsCriteria->equals($criteria)) {
					$count = ProfilesBasketsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collProfilesBasketss);
				}
			} else {
				$count = count($this->collProfilesBasketss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProfilesBaskets object to this object
	 * through the ProfilesBaskets foreign key attribute.
	 *
	 * @param      ProfilesBaskets $l ProfilesBaskets
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfilesBaskets(ProfilesBaskets $l)
	{
		if ($this->collProfilesBasketss === null) {
			$this->initProfilesBasketss();
		}
		if (!in_array($l, $this->collProfilesBasketss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilesBasketss, $l);
			$l->setTracks($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tracks is new, it will return
	 * an empty collection; or if this Tracks has previously
	 * been saved, it will retrieve related ProfilesBasketss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tracks.
	 */
	public function getProfilesBasketssJoinProfiles($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesBasketss === null) {
			if ($this->isNew()) {
				$this->collProfilesBasketss = array();
			} else {

				$criteria->add(ProfilesBasketsPeer::TRACKS_ID, $this->tracks_id);

				$this->collProfilesBasketss = ProfilesBasketsPeer::doSelectJoinProfiles($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilesBasketsPeer::TRACKS_ID, $this->tracks_id);

			if (!isset($this->lastProfilesBasketsCriteria) || !$this->lastProfilesBasketsCriteria->equals($criteria)) {
				$this->collProfilesBasketss = ProfilesBasketsPeer::doSelectJoinProfiles($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilesBasketsCriteria = $criteria;

		return $this->collProfilesBasketss;
	}

	/**
	 * Clears out the collProfilesWishlistss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilesWishlistss()
	 */
	public function clearProfilesWishlistss()
	{
		$this->collProfilesWishlistss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilesWishlistss collection (array).
	 *
	 * By default this just sets the collProfilesWishlistss collection to an empty array (like clearcollProfilesWishlistss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilesWishlistss()
	{
		$this->collProfilesWishlistss = array();
	}

	/**
	 * Gets an array of ProfilesWishlists objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tracks has previously been saved, it will retrieve
	 * related ProfilesWishlistss from storage. If this Tracks is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProfilesWishlists[]
	 * @throws     PropelException
	 */
	public function getProfilesWishlistss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesWishlistss === null) {
			if ($this->isNew()) {
			   $this->collProfilesWishlistss = array();
			} else {

				$criteria->add(ProfilesWishlistsPeer::TRACKS_ID, $this->tracks_id);

				ProfilesWishlistsPeer::addSelectColumns($criteria);
				$this->collProfilesWishlistss = ProfilesWishlistsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilesWishlistsPeer::TRACKS_ID, $this->tracks_id);

				ProfilesWishlistsPeer::addSelectColumns($criteria);
				if (!isset($this->lastProfilesWishlistsCriteria) || !$this->lastProfilesWishlistsCriteria->equals($criteria)) {
					$this->collProfilesWishlistss = ProfilesWishlistsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfilesWishlistsCriteria = $criteria;
		return $this->collProfilesWishlistss;
	}

	/**
	 * Returns the number of related ProfilesWishlists objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProfilesWishlists objects.
	 * @throws     PropelException
	 */
	public function countProfilesWishlistss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilesWishlistss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilesWishlistsPeer::TRACKS_ID, $this->tracks_id);

				$count = ProfilesWishlistsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilesWishlistsPeer::TRACKS_ID, $this->tracks_id);

				if (!isset($this->lastProfilesWishlistsCriteria) || !$this->lastProfilesWishlistsCriteria->equals($criteria)) {
					$count = ProfilesWishlistsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collProfilesWishlistss);
				}
			} else {
				$count = count($this->collProfilesWishlistss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProfilesWishlists object to this object
	 * through the ProfilesWishlists foreign key attribute.
	 *
	 * @param      ProfilesWishlists $l ProfilesWishlists
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfilesWishlists(ProfilesWishlists $l)
	{
		if ($this->collProfilesWishlistss === null) {
			$this->initProfilesWishlistss();
		}
		if (!in_array($l, $this->collProfilesWishlistss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilesWishlistss, $l);
			$l->setTracks($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tracks is new, it will return
	 * an empty collection; or if this Tracks has previously
	 * been saved, it will retrieve related ProfilesWishlistss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tracks.
	 */
	public function getProfilesWishlistssJoinProfiles($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesWishlistss === null) {
			if ($this->isNew()) {
				$this->collProfilesWishlistss = array();
			} else {

				$criteria->add(ProfilesWishlistsPeer::TRACKS_ID, $this->tracks_id);

				$this->collProfilesWishlistss = ProfilesWishlistsPeer::doSelectJoinProfiles($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilesWishlistsPeer::TRACKS_ID, $this->tracks_id);

			if (!isset($this->lastProfilesWishlistsCriteria) || !$this->lastProfilesWishlistsCriteria->equals($criteria)) {
				$this->collProfilesWishlistss = ProfilesWishlistsPeer::doSelectJoinProfiles($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilesWishlistsCriteria = $criteria;

		return $this->collProfilesWishlistss;
	}

	/**
	 * Clears out the collTracksGenress collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTracksGenress()
	 */
	public function clearTracksGenress()
	{
		$this->collTracksGenress = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTracksGenress collection (array).
	 *
	 * By default this just sets the collTracksGenress collection to an empty array (like clearcollTracksGenress());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTracksGenress()
	{
		$this->collTracksGenress = array();
	}

	/**
	 * Gets an array of TracksGenres objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tracks has previously been saved, it will retrieve
	 * related TracksGenress from storage. If this Tracks is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TracksGenres[]
	 * @throws     PropelException
	 */
	public function getTracksGenress($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTracksGenress === null) {
			if ($this->isNew()) {
			   $this->collTracksGenress = array();
			} else {

				$criteria->add(TracksGenresPeer::TRACKS_ID, $this->tracks_id);

				TracksGenresPeer::addSelectColumns($criteria);
				$this->collTracksGenress = TracksGenresPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TracksGenresPeer::TRACKS_ID, $this->tracks_id);

				TracksGenresPeer::addSelectColumns($criteria);
				if (!isset($this->lastTracksGenresCriteria) || !$this->lastTracksGenresCriteria->equals($criteria)) {
					$this->collTracksGenress = TracksGenresPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTracksGenresCriteria = $criteria;
		return $this->collTracksGenress;
	}

	/**
	 * Returns the number of related TracksGenres objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TracksGenres objects.
	 * @throws     PropelException
	 */
	public function countTracksGenress(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTracksGenress === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TracksGenresPeer::TRACKS_ID, $this->tracks_id);

				$count = TracksGenresPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TracksGenresPeer::TRACKS_ID, $this->tracks_id);

				if (!isset($this->lastTracksGenresCriteria) || !$this->lastTracksGenresCriteria->equals($criteria)) {
					$count = TracksGenresPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTracksGenress);
				}
			} else {
				$count = count($this->collTracksGenress);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TracksGenres object to this object
	 * through the TracksGenres foreign key attribute.
	 *
	 * @param      TracksGenres $l TracksGenres
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTracksGenres(TracksGenres $l)
	{
		if ($this->collTracksGenress === null) {
			$this->initTracksGenress();
		}
		if (!in_array($l, $this->collTracksGenress, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTracksGenress, $l);
			$l->setTracks($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tracks is new, it will return
	 * an empty collection; or if this Tracks has previously
	 * been saved, it will retrieve related TracksGenress from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tracks.
	 */
	public function getTracksGenressJoinGenres($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTracksGenress === null) {
			if ($this->isNew()) {
				$this->collTracksGenress = array();
			} else {

				$criteria->add(TracksGenresPeer::TRACKS_ID, $this->tracks_id);

				$this->collTracksGenress = TracksGenresPeer::doSelectJoinGenres($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TracksGenresPeer::TRACKS_ID, $this->tracks_id);

			if (!isset($this->lastTracksGenresCriteria) || !$this->lastTracksGenresCriteria->equals($criteria)) {
				$this->collTracksGenress = TracksGenresPeer::doSelectJoinGenres($criteria, $con, $join_behavior);
			}
		}
		$this->lastTracksGenresCriteria = $criteria;

		return $this->collTracksGenress;
	}

	/**
	 * Clears out the collTracksPlayeds collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTracksPlayeds()
	 */
	public function clearTracksPlayeds()
	{
		$this->collTracksPlayeds = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTracksPlayeds collection (array).
	 *
	 * By default this just sets the collTracksPlayeds collection to an empty array (like clearcollTracksPlayeds());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTracksPlayeds()
	{
		$this->collTracksPlayeds = array();
	}

	/**
	 * Gets an array of TracksPlayed objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tracks has previously been saved, it will retrieve
	 * related TracksPlayeds from storage. If this Tracks is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TracksPlayed[]
	 * @throws     PropelException
	 */
	public function getTracksPlayeds($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTracksPlayeds === null) {
			if ($this->isNew()) {
			   $this->collTracksPlayeds = array();
			} else {

				$criteria->add(TracksPlayedPeer::TRACKS_ID, $this->tracks_id);

				TracksPlayedPeer::addSelectColumns($criteria);
				$this->collTracksPlayeds = TracksPlayedPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TracksPlayedPeer::TRACKS_ID, $this->tracks_id);

				TracksPlayedPeer::addSelectColumns($criteria);
				if (!isset($this->lastTracksPlayedCriteria) || !$this->lastTracksPlayedCriteria->equals($criteria)) {
					$this->collTracksPlayeds = TracksPlayedPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTracksPlayedCriteria = $criteria;
		return $this->collTracksPlayeds;
	}

	/**
	 * Returns the number of related TracksPlayed objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TracksPlayed objects.
	 * @throws     PropelException
	 */
	public function countTracksPlayeds(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTracksPlayeds === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TracksPlayedPeer::TRACKS_ID, $this->tracks_id);

				$count = TracksPlayedPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TracksPlayedPeer::TRACKS_ID, $this->tracks_id);

				if (!isset($this->lastTracksPlayedCriteria) || !$this->lastTracksPlayedCriteria->equals($criteria)) {
					$count = TracksPlayedPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTracksPlayeds);
				}
			} else {
				$count = count($this->collTracksPlayeds);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TracksPlayed object to this object
	 * through the TracksPlayed foreign key attribute.
	 *
	 * @param      TracksPlayed $l TracksPlayed
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTracksPlayed(TracksPlayed $l)
	{
		if ($this->collTracksPlayeds === null) {
			$this->initTracksPlayeds();
		}
		if (!in_array($l, $this->collTracksPlayeds, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTracksPlayeds, $l);
			$l->setTracks($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tracks is new, it will return
	 * an empty collection; or if this Tracks has previously
	 * been saved, it will retrieve related TracksPlayeds from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tracks.
	 */
	public function getTracksPlayedsJoinProfiles($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTracksPlayeds === null) {
			if ($this->isNew()) {
				$this->collTracksPlayeds = array();
			} else {

				$criteria->add(TracksPlayedPeer::TRACKS_ID, $this->tracks_id);

				$this->collTracksPlayeds = TracksPlayedPeer::doSelectJoinProfiles($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TracksPlayedPeer::TRACKS_ID, $this->tracks_id);

			if (!isset($this->lastTracksPlayedCriteria) || !$this->lastTracksPlayedCriteria->equals($criteria)) {
				$this->collTracksPlayeds = TracksPlayedPeer::doSelectJoinProfiles($criteria, $con, $join_behavior);
			}
		}
		$this->lastTracksPlayedCriteria = $criteria;

		return $this->collTracksPlayeds;
	}

	/**
	 * Clears out the collTracksRecommendss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTracksRecommendss()
	 */
	public function clearTracksRecommendss()
	{
		$this->collTracksRecommendss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTracksRecommendss collection (array).
	 *
	 * By default this just sets the collTracksRecommendss collection to an empty array (like clearcollTracksRecommendss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTracksRecommendss()
	{
		$this->collTracksRecommendss = array();
	}

	/**
	 * Gets an array of TracksRecommends objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tracks has previously been saved, it will retrieve
	 * related TracksRecommendss from storage. If this Tracks is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TracksRecommends[]
	 * @throws     PropelException
	 */
	public function getTracksRecommendss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTracksRecommendss === null) {
			if ($this->isNew()) {
			   $this->collTracksRecommendss = array();
			} else {

				$criteria->add(TracksRecommendsPeer::TRACKS_ID, $this->tracks_id);

				TracksRecommendsPeer::addSelectColumns($criteria);
				$this->collTracksRecommendss = TracksRecommendsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TracksRecommendsPeer::TRACKS_ID, $this->tracks_id);

				TracksRecommendsPeer::addSelectColumns($criteria);
				if (!isset($this->lastTracksRecommendsCriteria) || !$this->lastTracksRecommendsCriteria->equals($criteria)) {
					$this->collTracksRecommendss = TracksRecommendsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTracksRecommendsCriteria = $criteria;
		return $this->collTracksRecommendss;
	}

	/**
	 * Returns the number of related TracksRecommends objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TracksRecommends objects.
	 * @throws     PropelException
	 */
	public function countTracksRecommendss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTracksRecommendss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TracksRecommendsPeer::TRACKS_ID, $this->tracks_id);

				$count = TracksRecommendsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TracksRecommendsPeer::TRACKS_ID, $this->tracks_id);

				if (!isset($this->lastTracksRecommendsCriteria) || !$this->lastTracksRecommendsCriteria->equals($criteria)) {
					$count = TracksRecommendsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTracksRecommendss);
				}
			} else {
				$count = count($this->collTracksRecommendss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TracksRecommends object to this object
	 * through the TracksRecommends foreign key attribute.
	 *
	 * @param      TracksRecommends $l TracksRecommends
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTracksRecommends(TracksRecommends $l)
	{
		if ($this->collTracksRecommendss === null) {
			$this->initTracksRecommendss();
		}
		if (!in_array($l, $this->collTracksRecommendss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTracksRecommendss, $l);
			$l->setTracks($this);
		}
	}

	/**
	 * Clears out the collTransactionsTrackss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTransactionsTrackss()
	 */
	public function clearTransactionsTrackss()
	{
		$this->collTransactionsTrackss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTransactionsTrackss collection (array).
	 *
	 * By default this just sets the collTransactionsTrackss collection to an empty array (like clearcollTransactionsTrackss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTransactionsTrackss()
	{
		$this->collTransactionsTrackss = array();
	}

	/**
	 * Gets an array of TransactionsTracks objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tracks has previously been saved, it will retrieve
	 * related TransactionsTrackss from storage. If this Tracks is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TransactionsTracks[]
	 * @throws     PropelException
	 */
	public function getTransactionsTrackss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactionsTrackss === null) {
			if ($this->isNew()) {
			   $this->collTransactionsTrackss = array();
			} else {

				$criteria->add(TransactionsTracksPeer::TRACKS_ID, $this->tracks_id);

				TransactionsTracksPeer::addSelectColumns($criteria);
				$this->collTransactionsTrackss = TransactionsTracksPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TransactionsTracksPeer::TRACKS_ID, $this->tracks_id);

				TransactionsTracksPeer::addSelectColumns($criteria);
				if (!isset($this->lastTransactionsTracksCriteria) || !$this->lastTransactionsTracksCriteria->equals($criteria)) {
					$this->collTransactionsTrackss = TransactionsTracksPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTransactionsTracksCriteria = $criteria;
		return $this->collTransactionsTrackss;
	}

	/**
	 * Returns the number of related TransactionsTracks objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TransactionsTracks objects.
	 * @throws     PropelException
	 */
	public function countTransactionsTrackss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTransactionsTrackss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TransactionsTracksPeer::TRACKS_ID, $this->tracks_id);

				$count = TransactionsTracksPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TransactionsTracksPeer::TRACKS_ID, $this->tracks_id);

				if (!isset($this->lastTransactionsTracksCriteria) || !$this->lastTransactionsTracksCriteria->equals($criteria)) {
					$count = TransactionsTracksPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTransactionsTrackss);
				}
			} else {
				$count = count($this->collTransactionsTrackss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TransactionsTracks object to this object
	 * through the TransactionsTracks foreign key attribute.
	 *
	 * @param      TransactionsTracks $l TransactionsTracks
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTransactionsTracks(TransactionsTracks $l)
	{
		if ($this->collTransactionsTrackss === null) {
			$this->initTransactionsTrackss();
		}
		if (!in_array($l, $this->collTransactionsTrackss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTransactionsTrackss, $l);
			$l->setTracks($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tracks is new, it will return
	 * an empty collection; or if this Tracks has previously
	 * been saved, it will retrieve related TransactionsTrackss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tracks.
	 */
	public function getTransactionsTrackssJoinTransactions($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TracksPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactionsTrackss === null) {
			if ($this->isNew()) {
				$this->collTransactionsTrackss = array();
			} else {

				$criteria->add(TransactionsTracksPeer::TRACKS_ID, $this->tracks_id);

				$this->collTransactionsTrackss = TransactionsTracksPeer::doSelectJoinTransactions($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionsTracksPeer::TRACKS_ID, $this->tracks_id);

			if (!isset($this->lastTransactionsTracksCriteria) || !$this->lastTransactionsTracksCriteria->equals($criteria)) {
				$this->collTransactionsTrackss = TransactionsTracksPeer::doSelectJoinTransactions($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionsTracksCriteria = $criteria;

		return $this->collTransactionsTrackss;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collProfilesBasketss) {
				foreach ((array) $this->collProfilesBasketss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilesWishlistss) {
				foreach ((array) $this->collProfilesWishlistss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTracksGenress) {
				foreach ((array) $this->collTracksGenress as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTracksPlayeds) {
				foreach ((array) $this->collTracksPlayeds as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTracksRecommendss) {
				foreach ((array) $this->collTracksRecommendss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTransactionsTrackss) {
				foreach ((array) $this->collTransactionsTrackss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collProfilesBasketss = null;
		$this->collProfilesWishlistss = null;
		$this->collTracksGenress = null;
		$this->collTracksPlayeds = null;
		$this->collTracksRecommendss = null;
		$this->collTransactionsTrackss = null;
			$this->aProfiles = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTracks:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTracks::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTracks
