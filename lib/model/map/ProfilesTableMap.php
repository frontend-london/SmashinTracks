<?php


/**
 * This class defines the structure of the 'profiles' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 01/17/12 01:36:42
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class ProfilesTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.ProfilesTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('profiles');
		$this->setPhpName('Profiles');
		$this->setClassname('Profiles');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('PROFILES_ID', 'ProfilesId', 'INTEGER', true, 11, null);
		$this->addColumn('PROFILES_NAME', 'ProfilesName', 'VARCHAR', true, 30, null);
		$this->addColumn('PROFILES_EMAIL', 'ProfilesEmail', 'VARCHAR', true, 50, null);
		$this->addColumn('PROFILES_PASSWORD', 'ProfilesPassword', 'VARCHAR', true, 64, null);
		$this->addColumn('PROFILES_TEXT', 'ProfilesText', 'VARCHAR', true, 500, null);
		$this->addColumn('PROFILES_DATE', 'ProfilesDate', 'TIMESTAMP', true, null, null);
		$this->addColumn('PROFILES_PATH', 'ProfilesPath', 'VARCHAR', true, 50, null);
		$this->addColumn('PROFILES_PHOTO', 'ProfilesPhoto', 'TINYINT', true, 1, 0);
		$this->addColumn('PROFILES_BALANCE', 'ProfilesBalance', 'INTEGER', true, 11, 0);
		$this->addColumn('PROFILES_BLOCKED', 'ProfilesBlocked', 'TINYINT', true, 1, 0);
		$this->addColumn('PROFILES_DELETED', 'ProfilesDeleted', 'TINYINT', true, 1, 0);
		$this->addColumn('PROFILES_PASSWORD_URL', 'ProfilesPasswordUrl', 'VARCHAR', false, 32, null);
		$this->addColumn('PROFILES_NEWSLETTER', 'ProfilesNewsletter', 'TINYINT', true, 1, 0);
		$this->addColumn('PROFILES_SALES_INFORM_INSTANTLY', 'ProfilesSalesInformInstantly', 'TINYINT', true, 1, 0);
		$this->addColumn('PROFILES_SALES_INFORM_DAILY', 'ProfilesSalesInformDaily', 'TINYINT', true, 1, 0);
		$this->addColumn('PROFILES_SALES_INFORM_WEEKLY', 'ProfilesSalesInformWeekly', 'TINYINT', true, 1, 0);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('ProfilesBaskets', 'ProfilesBaskets', RelationMap::ONE_TO_MANY, array('profiles_id' => 'profiles_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('ProfilesUrls', 'ProfilesUrls', RelationMap::ONE_TO_MANY, array('profiles_id' => 'profiles_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('ProfilesViewed', 'ProfilesViewed', RelationMap::ONE_TO_MANY, array('profiles_id' => 'profiles_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('ProfilesWishlists', 'ProfilesWishlists', RelationMap::ONE_TO_MANY, array('profiles_id' => 'profiles_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Tracks', 'Tracks', RelationMap::ONE_TO_MANY, array('profiles_id' => 'profiles_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('TracksVotes', 'TracksVotes', RelationMap::ONE_TO_MANY, array('profiles_id' => 'profiles_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Transactions', 'Transactions', RelationMap::ONE_TO_MANY, array('profiles_id' => 'profiles_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('TransactionsSaldo', 'TransactionsSaldo', RelationMap::ONE_TO_MANY, array('profiles_id' => 'profiles_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Withdraws', 'Withdraws', RelationMap::ONE_TO_MANY, array('profiles_id' => 'profiles_id', ), 'RESTRICT', 'RESTRICT');
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // ProfilesTableMap
